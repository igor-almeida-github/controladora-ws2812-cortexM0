
controladora_ws2812_cortexM0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003420  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003564  08003564  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003564  08003564  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003564  08003564  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800356c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009dc  20000010  0800357c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ec  0800357c  000209ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e328  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  0002e360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00031488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001045c  00000000  00000000  00032100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9f9  00000000  00000000  0004255c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066aca  00000000  00000000  00050f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7a1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fec  00000000  00000000  000b7a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034c8 	.word	0x080034c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080034c8 	.word	0x080034c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f93b 	bl	80004a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f819 	bl	8000260 <SystemClock_Config>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* --------------- FreeRTOS Task management --------------- */
  /* Config. ws2812-task */
  status = xTaskCreate(&ws2812_task, "ws2812-task", 100, NULL, 2, &ws2812_task_handle);
 800022e:	4909      	ldr	r1, [pc, #36]	; (8000254 <main+0x34>)
 8000230:	4809      	ldr	r0, [pc, #36]	; (8000258 <main+0x38>)
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <main+0x3c>)
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2302      	movs	r3, #2
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	2264      	movs	r2, #100	; 0x64
 800023e:	f001 fdb8 	bl	8001db2 <xTaskCreate>
 8000242:	0003      	movs	r3, r0
 8000244:	607b      	str	r3, [r7, #4]
  if(status != pdPASS) while(1);  // Traps the code if the above function returns an unexpected status
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d000      	beq.n	800024e <main+0x2e>
 800024c:	e7fe      	b.n	800024c <main+0x2c>

  /* Start the freeRTOS scheduler */
  vTaskStartScheduler();
 800024e:	f001 fee9 	bl	8002024 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000252:	e7fe      	b.n	8000252 <main+0x32>
 8000254:	080034e0 	.word	0x080034e0
 8000258:	08000443 	.word	0x08000443
 800025c:	2000095c 	.word	0x2000095c

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b091      	sub	sp, #68	; 0x44
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2410      	movs	r4, #16
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2330      	movs	r3, #48	; 0x30
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f003 f920 	bl	80034b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2310      	movs	r3, #16
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f003 f919 	bl	80034b6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	0021      	movs	r1, r4
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2201      	movs	r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2210      	movs	r2, #16
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2200      	movs	r2, #0
 800029c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 f9db 	bl	800065c <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002aa:	f000 f82b 	bl	8000304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	003b      	movs	r3, r7
 80002b0:	2207      	movs	r2, #7
 80002b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	003b      	movs	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	003b      	movs	r3, r7
 80002c8:	2100      	movs	r1, #0
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fce0 	bl	8000c90 <HAL_RCC_ClockConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002d4:	f000 f816 	bl	8000304 <Error_Handler>
  }
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b011      	add	sp, #68	; 0x44
 80002de:	bd90      	pop	{r4, r7, pc}

080002e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d101      	bne.n	80002f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002f2:	f000 f8e9 	bl	80004c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b002      	add	sp, #8
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	40002000 	.word	0x40002000

08000304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
}
 800030a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030c:	e7fe      	b.n	800030c <Error_Handler+0x8>
	...

08000310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <HAL_MspInit+0x44>)
 8000318:	699a      	ldr	r2, [r3, #24]
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <HAL_MspInit+0x44>)
 800031c:	2101      	movs	r1, #1
 800031e:	430a      	orrs	r2, r1
 8000320:	619a      	str	r2, [r3, #24]
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <HAL_MspInit+0x44>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	2201      	movs	r2, #1
 8000328:	4013      	ands	r3, r2
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <HAL_MspInit+0x44>)
 8000330:	69da      	ldr	r2, [r3, #28]
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <HAL_MspInit+0x44>)
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	0549      	lsls	r1, r1, #21
 8000338:	430a      	orrs	r2, r1
 800033a:	61da      	str	r2, [r3, #28]
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <HAL_MspInit+0x44>)
 800033e:	69da      	ldr	r2, [r3, #28]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	055b      	lsls	r3, r3, #21
 8000344:	4013      	ands	r3, r2
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	40021000 	.word	0x40021000

08000358 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08a      	sub	sp, #40	; 0x28
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	0019      	movs	r1, r3
 800036e:	2013      	movs	r0, #19
 8000370:	f000 f94e 	bl	8000610 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000374:	2013      	movs	r0, #19
 8000376:	f000 f960 	bl	800063a <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <HAL_InitTick+0xa8>)
 800037c:	69da      	ldr	r2, [r3, #28]
 800037e:	4b20      	ldr	r3, [pc, #128]	; (8000400 <HAL_InitTick+0xa8>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0049      	lsls	r1, r1, #1
 8000384:	430a      	orrs	r2, r1
 8000386:	61da      	str	r2, [r3, #28]
 8000388:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <HAL_InitTick+0xa8>)
 800038a:	69da      	ldr	r2, [r3, #28]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	4013      	ands	r3, r2
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000396:	230c      	movs	r3, #12
 8000398:	18fa      	adds	r2, r7, r3
 800039a:	2310      	movs	r3, #16
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fdc7 	bl	8000f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003a6:	f000 fdaf 	bl	8000f08 <HAL_RCC_GetPCLK1Freq>
 80003aa:	0003      	movs	r3, r0
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b0:	4914      	ldr	r1, [pc, #80]	; (8000404 <HAL_InitTick+0xac>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f7ff fea8 	bl	8000108 <__udivsi3>
 80003b8:	0003      	movs	r3, r0
 80003ba:	3b01      	subs	r3, #1
 80003bc:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <HAL_InitTick+0xb0>)
 80003c0:	4a12      	ldr	r2, [pc, #72]	; (800040c <HAL_InitTick+0xb4>)
 80003c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <HAL_InitTick+0xb0>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <HAL_InitTick+0xb8>)
 80003c8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <HAL_InitTick+0xb0>)
 80003cc:	6a3a      	ldr	r2, [r7, #32]
 80003ce:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <HAL_InitTick+0xb0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_InitTick+0xb0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_InitTick+0xb0>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fdd2 	bl	8000f88 <HAL_TIM_Base_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d105      	bne.n	80003f4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <HAL_InitTick+0xb0>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fe24 	bl	8001038 <HAL_TIM_Base_Start_IT>
 80003f0:	0003      	movs	r3, r0
 80003f2:	e000      	b.n	80003f6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80003f4:	2301      	movs	r3, #1
}
 80003f6:	0018      	movs	r0, r3
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b00a      	add	sp, #40	; 0x28
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	40021000 	.word	0x40021000
 8000404:	000f4240 	.word	0x000f4240
 8000408:	20000960 	.word	0x20000960
 800040c:	40002000 	.word	0x40002000
 8000410:	000003e7 	.word	0x000003e7

08000414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <NMI_Handler+0x4>

0800041a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041e:	e7fe      	b.n	800041e <HardFault_Handler+0x4>

08000420 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <TIM14_IRQHandler+0x14>)
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fe4c 	bl	80010c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000960 	.word	0x20000960

08000438 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <ws2812_task>:
 * @brief
 * @note
 * @param
 * @retval
 */
void ws2812_task(void *parameters){
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	/* Main loop */
	while(1){
 800044a:	e7fe      	b.n	800044a <ws2812_task+0x8>

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490e      	ldr	r1, [pc, #56]	; (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0b      	ldr	r4, [pc, #44]	; (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000476:	f7ff ffdf 	bl	8000438 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800047a:	f002 ffef 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff fecf 	bl	8000220 <main>

08000482 <LoopForever>:

LoopForever:
    b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000490:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 8000494:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000498:	200009ec 	.word	0x200009ec

0800049c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC1_IRQHandler>
	...

080004a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <HAL_Init+0x24>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_Init+0x24>)
 80004aa:	2110      	movs	r1, #16
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff51 	bl	8000358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b6:	f7ff ff2b 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	0018      	movs	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_IncTick+0x1c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	001a      	movs	r2, r3
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_IncTick+0x20>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	18d2      	adds	r2, r2, r3
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <HAL_IncTick+0x20>)
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000004 	.word	0x20000004
 80004e8:	200009a8 	.word	0x200009a8

080004ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  return uwTick;
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <HAL_GetTick+0x10>)
 80004f2:	681b      	ldr	r3, [r3, #0]
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	200009a8 	.word	0x200009a8

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b7f      	cmp	r3, #127	; 0x7f
 8000512:	d809      	bhi.n	8000528 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	231f      	movs	r3, #31
 800051c:	401a      	ands	r2, r3
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <__NVIC_EnableIRQ+0x30>)
 8000520:	2101      	movs	r1, #1
 8000522:	4091      	lsls	r1, r2
 8000524:	000a      	movs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
  }
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	e000e100 	.word	0xe000e100

08000534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b7f      	cmp	r3, #127	; 0x7f
 8000548:	d828      	bhi.n	800059c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054a:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <__NVIC_SetPriority+0xd4>)
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b25b      	sxtb	r3, r3
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	33c0      	adds	r3, #192	; 0xc0
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	589b      	ldr	r3, [r3, r2]
 800055a:	1dfa      	adds	r2, r7, #7
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	0011      	movs	r1, r2
 8000560:	2203      	movs	r2, #3
 8000562:	400a      	ands	r2, r1
 8000564:	00d2      	lsls	r2, r2, #3
 8000566:	21ff      	movs	r1, #255	; 0xff
 8000568:	4091      	lsls	r1, r2
 800056a:	000a      	movs	r2, r1
 800056c:	43d2      	mvns	r2, r2
 800056e:	401a      	ands	r2, r3
 8000570:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	019b      	lsls	r3, r3, #6
 8000576:	22ff      	movs	r2, #255	; 0xff
 8000578:	401a      	ands	r2, r3
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	0018      	movs	r0, r3
 8000580:	2303      	movs	r3, #3
 8000582:	4003      	ands	r3, r0
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000588:	481f      	ldr	r0, [pc, #124]	; (8000608 <__NVIC_SetPriority+0xd4>)
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	089b      	lsrs	r3, r3, #2
 8000592:	430a      	orrs	r2, r1
 8000594:	33c0      	adds	r3, #192	; 0xc0
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800059a:	e031      	b.n	8000600 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <__NVIC_SetPriority+0xd8>)
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	0019      	movs	r1, r3
 80005a4:	230f      	movs	r3, #15
 80005a6:	400b      	ands	r3, r1
 80005a8:	3b08      	subs	r3, #8
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	3306      	adds	r3, #6
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	3304      	adds	r3, #4
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1dfa      	adds	r2, r7, #7
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	0011      	movs	r1, r2
 80005bc:	2203      	movs	r2, #3
 80005be:	400a      	ands	r2, r1
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	21ff      	movs	r1, #255	; 0xff
 80005c4:	4091      	lsls	r1, r2
 80005c6:	000a      	movs	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	401a      	ands	r2, r3
 80005cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	019b      	lsls	r3, r3, #6
 80005d2:	22ff      	movs	r2, #255	; 0xff
 80005d4:	401a      	ands	r2, r3
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	0018      	movs	r0, r3
 80005dc:	2303      	movs	r3, #3
 80005de:	4003      	ands	r3, r0
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <__NVIC_SetPriority+0xd8>)
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	001c      	movs	r4, r3
 80005ec:	230f      	movs	r3, #15
 80005ee:	4023      	ands	r3, r4
 80005f0:	3b08      	subs	r3, #8
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	430a      	orrs	r2, r1
 80005f6:	3306      	adds	r3, #6
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	18c3      	adds	r3, r0, r3
 80005fc:	3304      	adds	r3, #4
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b003      	add	sp, #12
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	210f      	movs	r1, #15
 800061c:	187b      	adds	r3, r7, r1
 800061e:	1c02      	adds	r2, r0, #0
 8000620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	187b      	adds	r3, r7, r1
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b25b      	sxtb	r3, r3
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff ff81 	bl	8000534 <__NVIC_SetPriority>
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b004      	add	sp, #16
 8000638:	bd80      	pop	{r7, pc}

0800063a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	0002      	movs	r2, r0
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff ff57 	bl	8000500 <__NVIC_EnableIRQ>
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e301      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	d100      	bne.n	800067a <HAL_RCC_OscConfig+0x1e>
 8000678:	e08d      	b.n	8000796 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800067a:	4bc3      	ldr	r3, [pc, #780]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	220c      	movs	r2, #12
 8000680:	4013      	ands	r3, r2
 8000682:	2b04      	cmp	r3, #4
 8000684:	d00e      	beq.n	80006a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000686:	4bc0      	ldr	r3, [pc, #768]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	220c      	movs	r2, #12
 800068c:	4013      	ands	r3, r2
 800068e:	2b08      	cmp	r3, #8
 8000690:	d116      	bne.n	80006c0 <HAL_RCC_OscConfig+0x64>
 8000692:	4bbd      	ldr	r3, [pc, #756]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	025b      	lsls	r3, r3, #9
 800069a:	401a      	ands	r2, r3
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	025b      	lsls	r3, r3, #9
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d10d      	bne.n	80006c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006a4:	4bb8      	ldr	r3, [pc, #736]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	d100      	bne.n	80006b2 <HAL_RCC_OscConfig+0x56>
 80006b0:	e070      	b.n	8000794 <HAL_RCC_OscConfig+0x138>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d000      	beq.n	80006bc <HAL_RCC_OscConfig+0x60>
 80006ba:	e06b      	b.n	8000794 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	e2d8      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d107      	bne.n	80006d8 <HAL_RCC_OscConfig+0x7c>
 80006c8:	4baf      	ldr	r3, [pc, #700]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4bae      	ldr	r3, [pc, #696]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	0249      	lsls	r1, r1, #9
 80006d2:	430a      	orrs	r2, r1
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e02f      	b.n	8000738 <HAL_RCC_OscConfig+0xdc>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10c      	bne.n	80006fa <HAL_RCC_OscConfig+0x9e>
 80006e0:	4ba9      	ldr	r3, [pc, #676]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4ba8      	ldr	r3, [pc, #672]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80006e6:	49a9      	ldr	r1, [pc, #676]	; (800098c <HAL_RCC_OscConfig+0x330>)
 80006e8:	400a      	ands	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	4ba6      	ldr	r3, [pc, #664]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4ba5      	ldr	r3, [pc, #660]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80006f2:	49a7      	ldr	r1, [pc, #668]	; (8000990 <HAL_RCC_OscConfig+0x334>)
 80006f4:	400a      	ands	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	e01e      	b.n	8000738 <HAL_RCC_OscConfig+0xdc>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d10e      	bne.n	8000720 <HAL_RCC_OscConfig+0xc4>
 8000702:	4ba1      	ldr	r3, [pc, #644]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4ba0      	ldr	r3, [pc, #640]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	02c9      	lsls	r1, r1, #11
 800070c:	430a      	orrs	r2, r1
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	4b9d      	ldr	r3, [pc, #628]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b9c      	ldr	r3, [pc, #624]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	0249      	lsls	r1, r1, #9
 800071a:	430a      	orrs	r2, r1
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	e00b      	b.n	8000738 <HAL_RCC_OscConfig+0xdc>
 8000720:	4b99      	ldr	r3, [pc, #612]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b98      	ldr	r3, [pc, #608]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000726:	4999      	ldr	r1, [pc, #612]	; (800098c <HAL_RCC_OscConfig+0x330>)
 8000728:	400a      	ands	r2, r1
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	4b96      	ldr	r3, [pc, #600]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b95      	ldr	r3, [pc, #596]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000732:	4997      	ldr	r1, [pc, #604]	; (8000990 <HAL_RCC_OscConfig+0x334>)
 8000734:	400a      	ands	r2, r1
 8000736:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d014      	beq.n	800076a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000740:	f7ff fed4 	bl	80004ec <HAL_GetTick>
 8000744:	0003      	movs	r3, r0
 8000746:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000748:	e008      	b.n	800075c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800074a:	f7ff fecf 	bl	80004ec <HAL_GetTick>
 800074e:	0002      	movs	r2, r0
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	2b64      	cmp	r3, #100	; 0x64
 8000756:	d901      	bls.n	800075c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000758:	2303      	movs	r3, #3
 800075a:	e28a      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800075c:	4b8a      	ldr	r3, [pc, #552]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	029b      	lsls	r3, r3, #10
 8000764:	4013      	ands	r3, r2
 8000766:	d0f0      	beq.n	800074a <HAL_RCC_OscConfig+0xee>
 8000768:	e015      	b.n	8000796 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800076a:	f7ff febf 	bl	80004ec <HAL_GetTick>
 800076e:	0003      	movs	r3, r0
 8000770:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000772:	e008      	b.n	8000786 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000774:	f7ff feba 	bl	80004ec <HAL_GetTick>
 8000778:	0002      	movs	r2, r0
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	2b64      	cmp	r3, #100	; 0x64
 8000780:	d901      	bls.n	8000786 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000782:	2303      	movs	r3, #3
 8000784:	e275      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000786:	4b80      	ldr	r3, [pc, #512]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	029b      	lsls	r3, r3, #10
 800078e:	4013      	ands	r3, r2
 8000790:	d1f0      	bne.n	8000774 <HAL_RCC_OscConfig+0x118>
 8000792:	e000      	b.n	8000796 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000794:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2202      	movs	r2, #2
 800079c:	4013      	ands	r3, r2
 800079e:	d100      	bne.n	80007a2 <HAL_RCC_OscConfig+0x146>
 80007a0:	e069      	b.n	8000876 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007a2:	4b79      	ldr	r3, [pc, #484]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	220c      	movs	r2, #12
 80007a8:	4013      	ands	r3, r2
 80007aa:	d00b      	beq.n	80007c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80007ac:	4b76      	ldr	r3, [pc, #472]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	220c      	movs	r2, #12
 80007b2:	4013      	ands	r3, r2
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d11c      	bne.n	80007f2 <HAL_RCC_OscConfig+0x196>
 80007b8:	4b73      	ldr	r3, [pc, #460]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	025b      	lsls	r3, r3, #9
 80007c0:	4013      	ands	r3, r2
 80007c2:	d116      	bne.n	80007f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007c4:	4b70      	ldr	r3, [pc, #448]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2202      	movs	r2, #2
 80007ca:	4013      	ands	r3, r2
 80007cc:	d005      	beq.n	80007da <HAL_RCC_OscConfig+0x17e>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d001      	beq.n	80007da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e24b      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007da:	4b6b      	ldr	r3, [pc, #428]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	22f8      	movs	r2, #248	; 0xf8
 80007e0:	4393      	bics	r3, r2
 80007e2:	0019      	movs	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	00da      	lsls	r2, r3, #3
 80007ea:	4b67      	ldr	r3, [pc, #412]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80007ec:	430a      	orrs	r2, r1
 80007ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007f0:	e041      	b.n	8000876 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d024      	beq.n	8000844 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007fa:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b62      	ldr	r3, [pc, #392]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000806:	f7ff fe71 	bl	80004ec <HAL_GetTick>
 800080a:	0003      	movs	r3, r0
 800080c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800080e:	e008      	b.n	8000822 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000810:	f7ff fe6c 	bl	80004ec <HAL_GetTick>
 8000814:	0002      	movs	r2, r0
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	2b02      	cmp	r3, #2
 800081c:	d901      	bls.n	8000822 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800081e:	2303      	movs	r3, #3
 8000820:	e227      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000822:	4b59      	ldr	r3, [pc, #356]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2202      	movs	r2, #2
 8000828:	4013      	ands	r3, r2
 800082a:	d0f1      	beq.n	8000810 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800082c:	4b56      	ldr	r3, [pc, #344]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	22f8      	movs	r2, #248	; 0xf8
 8000832:	4393      	bics	r3, r2
 8000834:	0019      	movs	r1, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	00da      	lsls	r2, r3, #3
 800083c:	4b52      	ldr	r3, [pc, #328]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800083e:	430a      	orrs	r2, r1
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e018      	b.n	8000876 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000844:	4b50      	ldr	r3, [pc, #320]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b4f      	ldr	r3, [pc, #316]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800084a:	2101      	movs	r1, #1
 800084c:	438a      	bics	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000850:	f7ff fe4c 	bl	80004ec <HAL_GetTick>
 8000854:	0003      	movs	r3, r0
 8000856:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000858:	e008      	b.n	800086c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800085a:	f7ff fe47 	bl	80004ec <HAL_GetTick>
 800085e:	0002      	movs	r2, r0
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2b02      	cmp	r3, #2
 8000866:	d901      	bls.n	800086c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000868:	2303      	movs	r3, #3
 800086a:	e202      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800086c:	4b46      	ldr	r3, [pc, #280]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2202      	movs	r2, #2
 8000872:	4013      	ands	r3, r2
 8000874:	d1f1      	bne.n	800085a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2208      	movs	r2, #8
 800087c:	4013      	ands	r3, r2
 800087e:	d036      	beq.n	80008ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d019      	beq.n	80008bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000888:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800088a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800088c:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800088e:	2101      	movs	r1, #1
 8000890:	430a      	orrs	r2, r1
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000894:	f7ff fe2a 	bl	80004ec <HAL_GetTick>
 8000898:	0003      	movs	r3, r0
 800089a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800089c:	e008      	b.n	80008b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800089e:	f7ff fe25 	bl	80004ec <HAL_GetTick>
 80008a2:	0002      	movs	r2, r0
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d901      	bls.n	80008b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80008ac:	2303      	movs	r3, #3
 80008ae:	e1e0      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008b0:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	2202      	movs	r2, #2
 80008b6:	4013      	ands	r3, r2
 80008b8:	d0f1      	beq.n	800089e <HAL_RCC_OscConfig+0x242>
 80008ba:	e018      	b.n	80008ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008bc:	4b32      	ldr	r3, [pc, #200]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80008be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	438a      	bics	r2, r1
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008c8:	f7ff fe10 	bl	80004ec <HAL_GetTick>
 80008cc:	0003      	movs	r3, r0
 80008ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008d0:	e008      	b.n	80008e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008d2:	f7ff fe0b 	bl	80004ec <HAL_GetTick>
 80008d6:	0002      	movs	r2, r0
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d901      	bls.n	80008e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80008e0:	2303      	movs	r3, #3
 80008e2:	e1c6      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	2202      	movs	r2, #2
 80008ea:	4013      	ands	r3, r2
 80008ec:	d1f1      	bne.n	80008d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2204      	movs	r2, #4
 80008f4:	4013      	ands	r3, r2
 80008f6:	d100      	bne.n	80008fa <HAL_RCC_OscConfig+0x29e>
 80008f8:	e0b4      	b.n	8000a64 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80008fa:	201f      	movs	r0, #31
 80008fc:	183b      	adds	r3, r7, r0
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000904:	69da      	ldr	r2, [r3, #28]
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	055b      	lsls	r3, r3, #21
 800090a:	4013      	ands	r3, r2
 800090c:	d110      	bne.n	8000930 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0549      	lsls	r1, r1, #21
 8000918:	430a      	orrs	r2, r1
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800091e:	69da      	ldr	r2, [r3, #28]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	055b      	lsls	r3, r3, #21
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800092a:	183b      	adds	r3, r7, r0
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_RCC_OscConfig+0x338>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4013      	ands	r3, r2
 800093a:	d11a      	bne.n	8000972 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_RCC_OscConfig+0x338>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_RCC_OscConfig+0x338>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	0049      	lsls	r1, r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800094a:	f7ff fdcf 	bl	80004ec <HAL_GetTick>
 800094e:	0003      	movs	r3, r0
 8000950:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000952:	e008      	b.n	8000966 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000954:	f7ff fdca 	bl	80004ec <HAL_GetTick>
 8000958:	0002      	movs	r2, r0
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	2b64      	cmp	r3, #100	; 0x64
 8000960:	d901      	bls.n	8000966 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000962:	2303      	movs	r3, #3
 8000964:	e185      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_RCC_OscConfig+0x338>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	4013      	ands	r3, r2
 8000970:	d0f0      	beq.n	8000954 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d10e      	bne.n	8000998 <HAL_RCC_OscConfig+0x33c>
 800097a:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 800097c:	6a1a      	ldr	r2, [r3, #32]
 800097e:	4b02      	ldr	r3, [pc, #8]	; (8000988 <HAL_RCC_OscConfig+0x32c>)
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	621a      	str	r2, [r3, #32]
 8000986:	e035      	b.n	80009f4 <HAL_RCC_OscConfig+0x398>
 8000988:	40021000 	.word	0x40021000
 800098c:	fffeffff 	.word	0xfffeffff
 8000990:	fffbffff 	.word	0xfffbffff
 8000994:	40007000 	.word	0x40007000
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10c      	bne.n	80009ba <HAL_RCC_OscConfig+0x35e>
 80009a0:	4bb6      	ldr	r3, [pc, #728]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009a2:	6a1a      	ldr	r2, [r3, #32]
 80009a4:	4bb5      	ldr	r3, [pc, #724]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	438a      	bics	r2, r1
 80009aa:	621a      	str	r2, [r3, #32]
 80009ac:	4bb3      	ldr	r3, [pc, #716]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009ae:	6a1a      	ldr	r2, [r3, #32]
 80009b0:	4bb2      	ldr	r3, [pc, #712]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009b2:	2104      	movs	r1, #4
 80009b4:	438a      	bics	r2, r1
 80009b6:	621a      	str	r2, [r3, #32]
 80009b8:	e01c      	b.n	80009f4 <HAL_RCC_OscConfig+0x398>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d10c      	bne.n	80009dc <HAL_RCC_OscConfig+0x380>
 80009c2:	4bae      	ldr	r3, [pc, #696]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009c4:	6a1a      	ldr	r2, [r3, #32]
 80009c6:	4bad      	ldr	r3, [pc, #692]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009c8:	2104      	movs	r1, #4
 80009ca:	430a      	orrs	r2, r1
 80009cc:	621a      	str	r2, [r3, #32]
 80009ce:	4bab      	ldr	r3, [pc, #684]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009d0:	6a1a      	ldr	r2, [r3, #32]
 80009d2:	4baa      	ldr	r3, [pc, #680]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	430a      	orrs	r2, r1
 80009d8:	621a      	str	r2, [r3, #32]
 80009da:	e00b      	b.n	80009f4 <HAL_RCC_OscConfig+0x398>
 80009dc:	4ba7      	ldr	r3, [pc, #668]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009de:	6a1a      	ldr	r2, [r3, #32]
 80009e0:	4ba6      	ldr	r3, [pc, #664]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	438a      	bics	r2, r1
 80009e6:	621a      	str	r2, [r3, #32]
 80009e8:	4ba4      	ldr	r3, [pc, #656]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009ea:	6a1a      	ldr	r2, [r3, #32]
 80009ec:	4ba3      	ldr	r3, [pc, #652]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 80009ee:	2104      	movs	r1, #4
 80009f0:	438a      	bics	r2, r1
 80009f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d014      	beq.n	8000a26 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fc:	f7ff fd76 	bl	80004ec <HAL_GetTick>
 8000a00:	0003      	movs	r3, r0
 8000a02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a04:	e009      	b.n	8000a1a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a06:	f7ff fd71 	bl	80004ec <HAL_GetTick>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4a9b      	ldr	r2, [pc, #620]	; (8000c80 <HAL_RCC_OscConfig+0x624>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e12b      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a1a:	4b98      	ldr	r3, [pc, #608]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	d0f0      	beq.n	8000a06 <HAL_RCC_OscConfig+0x3aa>
 8000a24:	e013      	b.n	8000a4e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a26:	f7ff fd61 	bl	80004ec <HAL_GetTick>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a2e:	e009      	b.n	8000a44 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a30:	f7ff fd5c 	bl	80004ec <HAL_GetTick>
 8000a34:	0002      	movs	r2, r0
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	4a91      	ldr	r2, [pc, #580]	; (8000c80 <HAL_RCC_OscConfig+0x624>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d901      	bls.n	8000a44 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000a40:	2303      	movs	r3, #3
 8000a42:	e116      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a44:	4b8d      	ldr	r3, [pc, #564]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a46:	6a1b      	ldr	r3, [r3, #32]
 8000a48:	2202      	movs	r2, #2
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	d1f0      	bne.n	8000a30 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a4e:	231f      	movs	r3, #31
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d105      	bne.n	8000a64 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a58:	4b88      	ldr	r3, [pc, #544]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a5a:	69da      	ldr	r2, [r3, #28]
 8000a5c:	4b87      	ldr	r3, [pc, #540]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a5e:	4989      	ldr	r1, [pc, #548]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000a60:	400a      	ands	r2, r1
 8000a62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2210      	movs	r2, #16
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d063      	beq.n	8000b36 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d12a      	bne.n	8000acc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a76:	4b81      	ldr	r3, [pc, #516]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7a:	4b80      	ldr	r3, [pc, #512]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000a82:	4b7e      	ldr	r3, [pc, #504]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b7d      	ldr	r3, [pc, #500]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fd2d 	bl	80004ec <HAL_GetTick>
 8000a92:	0003      	movs	r3, r0
 8000a94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a96:	e008      	b.n	8000aaa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a98:	f7ff fd28 	bl	80004ec <HAL_GetTick>
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d901      	bls.n	8000aaa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e0e3      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000aaa:	4b74      	ldr	r3, [pc, #464]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aae:	2202      	movs	r2, #2
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d0f1      	beq.n	8000a98 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ab4:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab8:	22f8      	movs	r2, #248	; 0xf8
 8000aba:	4393      	bics	r3, r2
 8000abc:	0019      	movs	r1, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	00da      	lsls	r2, r3, #3
 8000ac4:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aca:	e034      	b.n	8000b36 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	3305      	adds	r3, #5
 8000ad2:	d111      	bne.n	8000af8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ad4:	4b69      	ldr	r3, [pc, #420]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad8:	4b68      	ldr	r3, [pc, #416]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000ada:	2104      	movs	r1, #4
 8000adc:	438a      	bics	r2, r1
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ae0:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae4:	22f8      	movs	r2, #248	; 0xf8
 8000ae6:	4393      	bics	r3, r2
 8000ae8:	0019      	movs	r1, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	00da      	lsls	r2, r3, #3
 8000af0:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000af2:	430a      	orrs	r2, r1
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
 8000af6:	e01e      	b.n	8000b36 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000af8:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000afc:	4b5f      	ldr	r3, [pc, #380]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000afe:	2104      	movs	r1, #4
 8000b00:	430a      	orrs	r2, r1
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000b04:	4b5d      	ldr	r3, [pc, #372]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b08:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	438a      	bics	r2, r1
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b10:	f7ff fcec 	bl	80004ec <HAL_GetTick>
 8000b14:	0003      	movs	r3, r0
 8000b16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b18:	e008      	b.n	8000b2c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b1a:	f7ff fce7 	bl	80004ec <HAL_GetTick>
 8000b1e:	0002      	movs	r2, r0
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d901      	bls.n	8000b2c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e0a2      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b2c:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b30:	2202      	movs	r2, #2
 8000b32:	4013      	ands	r3, r2
 8000b34:	d1f1      	bne.n	8000b1a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d100      	bne.n	8000b40 <HAL_RCC_OscConfig+0x4e4>
 8000b3e:	e097      	b.n	8000c70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b40:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	220c      	movs	r2, #12
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d100      	bne.n	8000b4e <HAL_RCC_OscConfig+0x4f2>
 8000b4c:	e06b      	b.n	8000c26 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d14c      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b56:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b5c:	494a      	ldr	r1, [pc, #296]	; (8000c88 <HAL_RCC_OscConfig+0x62c>)
 8000b5e:	400a      	ands	r2, r1
 8000b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fcc3 	bl	80004ec <HAL_GetTick>
 8000b66:	0003      	movs	r3, r0
 8000b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b6a:	e008      	b.n	8000b7e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6c:	f7ff fcbe 	bl	80004ec <HAL_GetTick>
 8000b70:	0002      	movs	r2, r0
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d901      	bls.n	8000b7e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e079      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	049b      	lsls	r3, r3, #18
 8000b86:	4013      	ands	r3, r2
 8000b88:	d1f0      	bne.n	8000b6c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8e:	220f      	movs	r2, #15
 8000b90:	4393      	bics	r3, r2
 8000b92:	0019      	movs	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9e:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a3a      	ldr	r2, [pc, #232]	; (8000c8c <HAL_RCC_OscConfig+0x630>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bb8:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	0449      	lsls	r1, r1, #17
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fc91 	bl	80004ec <HAL_GetTick>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd0:	f7ff fc8c 	bl	80004ec <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e047      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	049b      	lsls	r3, r3, #18
 8000bea:	4013      	ands	r3, r2
 8000bec:	d0f0      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x574>
 8000bee:	e03f      	b.n	8000c70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000bf6:	4924      	ldr	r1, [pc, #144]	; (8000c88 <HAL_RCC_OscConfig+0x62c>)
 8000bf8:	400a      	ands	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fc76 	bl	80004ec <HAL_GetTick>
 8000c00:	0003      	movs	r3, r0
 8000c02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c04:	e008      	b.n	8000c18 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c06:	f7ff fc71 	bl	80004ec <HAL_GetTick>
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d901      	bls.n	8000c18 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000c14:	2303      	movs	r3, #3
 8000c16:	e02c      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	049b      	lsls	r3, r3, #18
 8000c20:	4013      	ands	r3, r2
 8000c22:	d1f0      	bne.n	8000c06 <HAL_RCC_OscConfig+0x5aa>
 8000c24:	e024      	b.n	8000c70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e01f      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_RCC_OscConfig+0x620>)
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	401a      	ands	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d10e      	bne.n	8000c6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	220f      	movs	r2, #15
 8000c52:	401a      	ands	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d107      	bne.n	8000c6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	23f0      	movs	r3, #240	; 0xf0
 8000c60:	039b      	lsls	r3, r3, #14
 8000c62:	401a      	ands	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d001      	beq.n	8000c70 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b008      	add	sp, #32
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	00001388 	.word	0x00001388
 8000c84:	efffffff 	.word	0xefffffff
 8000c88:	feffffff 	.word	0xfeffffff
 8000c8c:	ffc2ffff 	.word	0xffc2ffff

08000c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e0b3      	b.n	8000e0c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ca4:	4b5b      	ldr	r3, [pc, #364]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4013      	ands	r3, r2
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d911      	bls.n	8000cd6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb2:	4b58      	ldr	r3, [pc, #352]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4393      	bics	r3, r2
 8000cba:	0019      	movs	r1, r3
 8000cbc:	4b55      	ldr	r3, [pc, #340]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc4:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d001      	beq.n	8000cd6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e09a      	b.n	8000e0c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d015      	beq.n	8000d0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d006      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000cea:	4b4b      	ldr	r3, [pc, #300]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000cf0:	21e0      	movs	r1, #224	; 0xe0
 8000cf2:	00c9      	lsls	r1, r1, #3
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf8:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	22f0      	movs	r2, #240	; 0xf0
 8000cfe:	4393      	bics	r3, r2
 8000d00:	0019      	movs	r1, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4013      	ands	r3, r2
 8000d14:	d040      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d107      	bne.n	8000d2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	029b      	lsls	r3, r3, #10
 8000d26:	4013      	ands	r3, r2
 8000d28:	d114      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e06e      	b.n	8000e0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d107      	bne.n	8000d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d36:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	049b      	lsls	r3, r3, #18
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d108      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e062      	b.n	8000e0c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d101      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e05b      	b.n	8000e0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4393      	bics	r3, r2
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000d64:	430a      	orrs	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d68:	f7ff fbc0 	bl	80004ec <HAL_GetTick>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d70:	e009      	b.n	8000d86 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d72:	f7ff fbbb 	bl	80004ec <HAL_GetTick>
 8000d76:	0002      	movs	r2, r0
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <HAL_RCC_ClockConfig+0x18c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e042      	b.n	8000e0c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d1ec      	bne.n	8000d72 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4013      	ands	r3, r2
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d211      	bcs.n	8000dca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2201      	movs	r2, #1
 8000dac:	4393      	bics	r3, r2
 8000dae:	0019      	movs	r1, r3
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_RCC_ClockConfig+0x184>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d001      	beq.n	8000dca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e020      	b.n	8000e0c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2204      	movs	r2, #4
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d009      	beq.n	8000de8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <HAL_RCC_ClockConfig+0x190>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	0019      	movs	r1, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000de4:	430a      	orrs	r2, r1
 8000de6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000de8:	f000 f820 	bl	8000e2c <HAL_RCC_GetSysClockFreq>
 8000dec:	0001      	movs	r1, r0
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_RCC_ClockConfig+0x188>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	220f      	movs	r2, #15
 8000df6:	4013      	ands	r3, r2
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_RCC_ClockConfig+0x194>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	40da      	lsrs	r2, r3
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_RCC_ClockConfig+0x198>)
 8000e02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff faa7 	bl	8000358 <HAL_InitTick>
  
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40022000 	.word	0x40022000
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	00001388 	.word	0x00001388
 8000e20:	fffff8ff 	.word	0xfffff8ff
 8000e24:	08003524 	.word	0x08003524
 8000e28:	20000000 	.word	0x20000000

08000e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b08f      	sub	sp, #60	; 0x3c
 8000e30:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e32:	2314      	movs	r3, #20
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	4a2b      	ldr	r2, [pc, #172]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e3a:	c313      	stmia	r3!, {r0, r1, r4}
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e46:	c313      	stmia	r3!, {r0, r1, r4}
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	220c      	movs	r2, #12
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d002      	beq.n	8000e76 <HAL_RCC_GetSysClockFreq+0x4a>
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d003      	beq.n	8000e7c <HAL_RCC_GetSysClockFreq+0x50>
 8000e74:	e02d      	b.n	8000ed2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000e7a:	e02d      	b.n	8000ed8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	0c9b      	lsrs	r3, r3, #18
 8000e80:	220f      	movs	r2, #15
 8000e82:	4013      	ands	r3, r2
 8000e84:	2214      	movs	r2, #20
 8000e86:	18ba      	adds	r2, r7, r2
 8000e88:	5cd3      	ldrb	r3, [r2, r3]
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	220f      	movs	r2, #15
 8000e92:	4013      	ands	r3, r2
 8000e94:	1d3a      	adds	r2, r7, #4
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	025b      	lsls	r3, r3, #9
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d009      	beq.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ea8:	f7ff f92e 	bl	8000108 <__udivsi3>
 8000eac:	0003      	movs	r3, r0
 8000eae:	001a      	movs	r2, r3
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	4353      	muls	r3, r2
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb6:	e009      	b.n	8000ecc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000eba:	000a      	movs	r2, r1
 8000ebc:	0152      	lsls	r2, r2, #5
 8000ebe:	1a52      	subs	r2, r2, r1
 8000ec0:	0193      	lsls	r3, r2, #6
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	185b      	adds	r3, r3, r1
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ed0:	e002      	b.n	8000ed8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ed6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b00f      	add	sp, #60	; 0x3c
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	080034ec 	.word	0x080034ec
 8000ee8:	080034fc 	.word	0x080034fc
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	007a1200 	.word	0x007a1200

08000ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	20000000 	.word	0x20000000

08000f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000f0c:	f7ff fff2 	bl	8000ef4 <HAL_RCC_GetHCLKFreq>
 8000f10:	0001      	movs	r1, r0
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	2207      	movs	r2, #7
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	40d9      	lsrs	r1, r3
 8000f22:	000b      	movs	r3, r1
}    
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	08003534 	.word	0x08003534

08000f34 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_RCC_GetClockConfig+0x4c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_RCC_GetClockConfig+0x4c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	401a      	ands	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_RCC_GetClockConfig+0x4c>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	23e0      	movs	r3, #224	; 0xe0
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	401a      	ands	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_RCC_GetClockConfig+0x50>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	401a      	ands	r2, r3
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e042      	b.n	8001020 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	223d      	movs	r2, #61	; 0x3d
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	223c      	movs	r2, #60	; 0x3c
 8000faa:	2100      	movs	r1, #0
 8000fac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 f839 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	223d      	movs	r2, #61	; 0x3d
 8000fba:	2102      	movs	r1, #2
 8000fbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	0010      	movs	r0, r2
 8000fca:	f000 f9b1 	bl	8001330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2246      	movs	r2, #70	; 0x46
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	223e      	movs	r2, #62	; 0x3e
 8000fda:	2101      	movs	r1, #1
 8000fdc:	5499      	strb	r1, [r3, r2]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	223f      	movs	r2, #63	; 0x3f
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	5499      	strb	r1, [r3, r2]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2240      	movs	r2, #64	; 0x40
 8000fea:	2101      	movs	r1, #1
 8000fec:	5499      	strb	r1, [r3, r2]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2241      	movs	r2, #65	; 0x41
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2242      	movs	r2, #66	; 0x42
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	5499      	strb	r1, [r3, r2]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2243      	movs	r2, #67	; 0x43
 8001002:	2101      	movs	r1, #1
 8001004:	5499      	strb	r1, [r3, r2]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2244      	movs	r2, #68	; 0x44
 800100a:	2101      	movs	r1, #1
 800100c:	5499      	strb	r1, [r3, r2]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2245      	movs	r2, #69	; 0x45
 8001012:	2101      	movs	r1, #1
 8001014:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	223d      	movs	r2, #61	; 0x3d
 800101a:	2101      	movs	r1, #1
 800101c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	223d      	movs	r2, #61	; 0x3d
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d001      	beq.n	8001050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e030      	b.n	80010b2 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	223d      	movs	r2, #61	; 0x3d
 8001054:	2102      	movs	r1, #2
 8001056:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a13      	ldr	r2, [pc, #76]	; (80010bc <HAL_TIM_Base_Start_IT+0x84>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d004      	beq.n	800107c <HAL_TIM_Base_Start_IT+0x44>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_TIM_Base_Start_IT+0x88>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d111      	bne.n	80010a0 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2207      	movs	r2, #7
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b06      	cmp	r3, #6
 800108c:	d010      	beq.n	80010b0 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800109e:	e007      	b.n	80010b0 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40000400 	.word	0x40000400

080010c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2202      	movs	r2, #2
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d124      	bne.n	8001124 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2202      	movs	r2, #2
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d11d      	bne.n	8001124 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4252      	negs	r2, r2
 80010f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2203      	movs	r2, #3
 8001100:	4013      	ands	r3, r2
 8001102:	d004      	beq.n	800110e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f8fa 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 800110c:	e007      	b.n	800111e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f000 f8ed 	bl	80012f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	0018      	movs	r0, r3
 800111a:	f000 f8f9 	bl	8001310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2204      	movs	r2, #4
 800112c:	4013      	ands	r3, r2
 800112e:	2b04      	cmp	r3, #4
 8001130:	d125      	bne.n	800117e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2204      	movs	r2, #4
 800113a:	4013      	ands	r3, r2
 800113c:	2b04      	cmp	r3, #4
 800113e:	d11e      	bne.n	800117e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2205      	movs	r2, #5
 8001146:	4252      	negs	r2, r2
 8001148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2202      	movs	r2, #2
 800114e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	23c0      	movs	r3, #192	; 0xc0
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4013      	ands	r3, r2
 800115c:	d004      	beq.n	8001168 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f000 f8cd 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8001166:	e007      	b.n	8001178 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f8c0 	bl	80012f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	0018      	movs	r0, r3
 8001174:	f000 f8cc 	bl	8001310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	2208      	movs	r2, #8
 8001186:	4013      	ands	r3, r2
 8001188:	2b08      	cmp	r3, #8
 800118a:	d124      	bne.n	80011d6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2208      	movs	r2, #8
 8001194:	4013      	ands	r3, r2
 8001196:	2b08      	cmp	r3, #8
 8001198:	d11d      	bne.n	80011d6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2209      	movs	r2, #9
 80011a0:	4252      	negs	r2, r2
 80011a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2204      	movs	r2, #4
 80011a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4013      	ands	r3, r2
 80011b4:	d004      	beq.n	80011c0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f000 f8a1 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 80011be:	e007      	b.n	80011d0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f894 	bl	80012f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 f8a0 	bl	8001310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2210      	movs	r2, #16
 80011de:	4013      	ands	r3, r2
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	d125      	bne.n	8001230 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2210      	movs	r2, #16
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d11e      	bne.n	8001230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2211      	movs	r2, #17
 80011f8:	4252      	negs	r2, r2
 80011fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2208      	movs	r2, #8
 8001200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d004      	beq.n	800121a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	0018      	movs	r0, r3
 8001214:	f000 f874 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8001218:	e007      	b.n	800122a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	0018      	movs	r0, r3
 800121e:	f000 f867 	bl	80012f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	0018      	movs	r0, r3
 8001226:	f000 f873 	bl	8001310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2201      	movs	r2, #1
 8001238:	4013      	ands	r3, r2
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10f      	bne.n	800125e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2202      	movs	r2, #2
 8001252:	4252      	negs	r2, r2
 8001254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff f841 	bl	80002e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	4013      	ands	r3, r2
 8001268:	2b80      	cmp	r3, #128	; 0x80
 800126a:	d10f      	bne.n	800128c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	4013      	ands	r3, r2
 8001276:	2b80      	cmp	r3, #128	; 0x80
 8001278:	d108      	bne.n	800128c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2281      	movs	r2, #129	; 0x81
 8001280:	4252      	negs	r2, r2
 8001282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f8c6 	bl	8001418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	4013      	ands	r3, r2
 8001296:	2b40      	cmp	r3, #64	; 0x40
 8001298:	d10f      	bne.n	80012ba <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b40      	cmp	r3, #64	; 0x40
 80012a6:	d108      	bne.n	80012ba <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	4252      	negs	r2, r2
 80012b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 f833 	bl	8001320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2220      	movs	r2, #32
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	d10f      	bne.n	80012e8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2220      	movs	r2, #32
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d108      	bne.n	80012e8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2221      	movs	r2, #33	; 0x21
 80012dc:	4252      	negs	r2, r2
 80012de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f890 	bl	8001408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <TIM_Base_SetConfig+0xc0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d003      	beq.n	8001350 <TIM_Base_SetConfig+0x20>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <TIM_Base_SetConfig+0xc4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d108      	bne.n	8001362 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2270      	movs	r2, #112	; 0x70
 8001354:	4393      	bics	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <TIM_Base_SetConfig+0xc0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00f      	beq.n	800138a <TIM_Base_SetConfig+0x5a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <TIM_Base_SetConfig+0xc4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00b      	beq.n	800138a <TIM_Base_SetConfig+0x5a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <TIM_Base_SetConfig+0xc8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <TIM_Base_SetConfig+0x5a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <TIM_Base_SetConfig+0xcc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d003      	beq.n	800138a <TIM_Base_SetConfig+0x5a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <TIM_Base_SetConfig+0xd0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d108      	bne.n	800139c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <TIM_Base_SetConfig+0xd4>)
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	4393      	bics	r3, r2
 80013a2:	001a      	movs	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <TIM_Base_SetConfig+0xc0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <TIM_Base_SetConfig+0xaa>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <TIM_Base_SetConfig+0xcc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d003      	beq.n	80013da <TIM_Base_SetConfig+0xaa>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <TIM_Base_SetConfig+0xd0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d103      	bne.n	80013e2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	615a      	str	r2, [r3, #20]
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b004      	add	sp, #16
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40012c00 	.word	0x40012c00
 80013f4:	40000400 	.word	0x40000400
 80013f8:	40002000 	.word	0x40002000
 80013fc:	40014400 	.word	0x40014400
 8001400:	40014800 	.word	0x40014800
 8001404:	fffffcff 	.word	0xfffffcff

08001408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3308      	adds	r3, #8
 8001434:	001a      	movs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	4252      	negs	r2, r2
 8001440:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3308      	adds	r3, #8
 8001446:	001a      	movs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3308      	adds	r3, #8
 8001450:	001a      	movs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}

08001464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}

0800147a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}

080014be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3301      	adds	r3, #1
 80014d2:	d103      	bne.n	80014dc <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e00c      	b.n	80014f6 <vListInsert+0x38>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3308      	adds	r3, #8
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e002      	b.n	80014ea <vListInsert+0x2c>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d2f6      	bcs.n	80014e4 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}

0800152a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6892      	ldr	r2, [r2, #8]
 8001540:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6852      	ldr	r2, [r2, #4]
 800154a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d103      	bne.n	800155e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	1e5a      	subs	r2, r3, #1
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b004      	add	sp, #16
 8001578:	bd80      	pop	{r7, pc}

0800157a <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <xQueueGenericReset+0x18>
 800158e:	b672      	cpsid	i
 8001590:	e7fe      	b.n	8001590 <xQueueGenericReset+0x16>

    taskENTER_CRITICAL();
 8001592:	f001 fd05 	bl	8002fa0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	434b      	muls	r3, r1
 80015a4:	18d2      	adds	r2, r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c0:	1e59      	subs	r1, r3, #1
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	434b      	muls	r3, r1
 80015c8:	18d2      	adds	r2, r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2244      	movs	r2, #68	; 0x44
 80015d2:	21ff      	movs	r1, #255	; 0xff
 80015d4:	5499      	strb	r1, [r3, r2]
        pxQueue->cTxLock = queueUNLOCKED;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2245      	movs	r2, #69	; 0x45
 80015da:	21ff      	movs	r1, #255	; 0xff
 80015dc:	5499      	strb	r1, [r3, r2]

        if( xNewQueue == pdFALSE )
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <xQueueGenericReset+0x7e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00f      	beq.n	800160c <xQueueGenericReset+0x92>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3310      	adds	r3, #16
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 ff1b 	bl	800242c <xTaskRemoveFromEventList>
 80015f6:	e009      	b.n	800160c <xQueueGenericReset+0x92>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3310      	adds	r3, #16
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ff13 	bl	8001428 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3324      	adds	r3, #36	; 0x24
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff ff0e 	bl	8001428 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800160c:	f001 fcda 	bl	8002fc4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001610:	2301      	movs	r3, #1
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}

0800161a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800161a:	b590      	push	{r4, r7, lr}
 800161c:	b08b      	sub	sp, #44	; 0x2c
 800161e:	af02      	add	r7, sp, #8
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <xQueueGenericCreate+0x18>
 800162e:	b672      	cpsid	i
 8001630:	e7fe      	b.n	8001630 <xQueueGenericCreate+0x16>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4353      	muls	r3, r2
 8001638:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <xQueueGenericCreate+0x38>
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	69f8      	ldr	r0, [r7, #28]
 8001644:	f7fe fd60 	bl	8000108 <__udivsi3>
 8001648:	0003      	movs	r3, r0
 800164a:	001a      	movs	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <xQueueGenericCreate+0x3c>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <xQueueGenericCreate+0x3e>
 8001656:	2300      	movs	r3, #0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <xQueueGenericCreate+0x46>
 800165c:	b672      	cpsid	i
 800165e:	e7fe      	b.n	800165e <xQueueGenericCreate+0x44>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3351      	adds	r3, #81	; 0x51
 8001664:	d901      	bls.n	800166a <xQueueGenericCreate+0x50>
 8001666:	b672      	cpsid	i
 8001668:	e7fe      	b.n	8001668 <xQueueGenericCreate+0x4e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3350      	adds	r3, #80	; 0x50
 800166e:	0018      	movs	r0, r3
 8001670:	f001 fd2e 	bl	80030d0 <pvPortMalloc>
 8001674:	0003      	movs	r3, r0
 8001676:	61bb      	str	r3, [r7, #24]

        if( pxNewQueue != NULL )
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00e      	beq.n	800169c <xQueueGenericCreate+0x82>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3350      	adds	r3, #80	; 0x50
 8001686:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781c      	ldrb	r4, [r3, #0]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	0023      	movs	r3, r4
 8001698:	f000 f805 	bl	80016a6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800169c:	69bb      	ldr	r3, [r7, #24]
    }
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b009      	add	sp, #36	; 0x24
 80016a4:	bd90      	pop	{r4, r7, pc}

080016a6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	001a      	movs	r2, r3
 80016b4:	1cfb      	adds	r3, r7, #3
 80016b6:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e002      	b.n	80016cc <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2101      	movs	r1, #1
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ff4c 	bl	800157a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1cfa      	adds	r2, r7, #3
 80016e6:	214c      	movs	r1, #76	; 0x4c
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	545a      	strb	r2, [r3, r1]
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b004      	add	sp, #16
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <xQueueGenericSend+0x20>
 8001710:	b672      	cpsid	i
 8001712:	e7fe      	b.n	8001712 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <xQueueGenericSend+0x2e>
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <xQueueGenericSend+0x32>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <xQueueGenericSend+0x34>
 8001726:	2300      	movs	r3, #0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <xQueueGenericSend+0x3c>
 800172c:	b672      	cpsid	i
 800172e:	e7fe      	b.n	800172e <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d103      	bne.n	800173e <xQueueGenericSend+0x4a>
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <xQueueGenericSend+0x4e>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <xQueueGenericSend+0x50>
 8001742:	2300      	movs	r3, #0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <xQueueGenericSend+0x58>
 8001748:	b672      	cpsid	i
 800174a:	e7fe      	b.n	800174a <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800174c:	f000 ffe4 	bl	8002718 <xTaskGetSchedulerState>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d102      	bne.n	800175a <xQueueGenericSend+0x66>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <xQueueGenericSend+0x6a>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <xQueueGenericSend+0x6c>
 800175e:	2300      	movs	r3, #0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <xQueueGenericSend+0x74>
 8001764:	b672      	cpsid	i
 8001766:	e7fe      	b.n	8001766 <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001768:	f001 fc1a 	bl	8002fa0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001774:	429a      	cmp	r2, r3
 8001776:	d302      	bcc.n	800177e <xQueueGenericSend+0x8a>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d114      	bne.n	80017a8 <xQueueGenericSend+0xb4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f99c 	bl	8001ac2 <prvCopyDataToQueue>
 800178a:	0003      	movs	r3, r0
 800178c:	61fb      	str	r3, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <xQueueGenericSend+0xac>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	3324      	adds	r3, #36	; 0x24
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fe46 	bl	800242c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80017a0:	f001 fc10 	bl	8002fc4 <vPortExitCritical>
                return pdPASS;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e05b      	b.n	8001860 <xQueueGenericSend+0x16c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <xQueueGenericSend+0xc2>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80017ae:	f001 fc09 	bl	8002fc4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e054      	b.n	8001860 <xQueueGenericSend+0x16c>
                }
                else if( xEntryTimeSet == pdFALSE )
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d106      	bne.n	80017ca <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80017bc:	2314      	movs	r3, #20
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fe8f 	bl	80024e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80017ca:	f001 fbfb 	bl	8002fc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80017ce:	f000 fc69 	bl	80020a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80017d2:	f001 fbe5 	bl	8002fa0 <vPortEnterCritical>
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2244      	movs	r2, #68	; 0x44
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	d103      	bne.n	80017ea <xQueueGenericSend+0xf6>
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	2244      	movs	r2, #68	; 0x44
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2245      	movs	r2, #69	; 0x45
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	d103      	bne.n	80017fe <xQueueGenericSend+0x10a>
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	2245      	movs	r2, #69	; 0x45
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
 80017fe:	f001 fbe1 	bl	8002fc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	2314      	movs	r3, #20
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fe7e 	bl	800250c <xTaskCheckForTimeOut>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d11e      	bne.n	8001852 <xQueueGenericSend+0x15e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fa58 	bl	8001ccc <prvIsQueueFull>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d011      	beq.n	8001844 <xQueueGenericSend+0x150>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	3310      	adds	r3, #16
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	0011      	movs	r1, r2
 8001828:	0018      	movs	r0, r3
 800182a:	f000 fdbb 	bl	80023a4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f9d7 	bl	8001be4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001836:	f000 fc41 	bl	80020bc <xTaskResumeAll>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d194      	bne.n	8001768 <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 800183e:	f001 fb9f 	bl	8002f80 <vPortYield>
 8001842:	e791      	b.n	8001768 <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f9cc 	bl	8001be4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800184c:	f000 fc36 	bl	80020bc <xTaskResumeAll>
 8001850:	e78a      	b.n	8001768 <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	0018      	movs	r0, r3
 8001856:	f000 f9c5 	bl	8001be4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800185a:	f000 fc2f 	bl	80020bc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800185e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	b00a      	add	sp, #40	; 0x28
 8001866:	bd80      	pop	{r7, pc}

08001868 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <xQueueGenericSendFromISR+0x1c>
 8001880:	b672      	cpsid	i
 8001882:	e7fe      	b.n	8001882 <xQueueGenericSendFromISR+0x1a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d103      	bne.n	8001892 <xQueueGenericSendFromISR+0x2a>
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <xQueueGenericSendFromISR+0x2e>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <xQueueGenericSendFromISR+0x30>
 8001896:	2300      	movs	r3, #0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <xQueueGenericSendFromISR+0x38>
 800189c:	b672      	cpsid	i
 800189e:	e7fe      	b.n	800189e <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d103      	bne.n	80018ae <xQueueGenericSendFromISR+0x46>
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <xQueueGenericSendFromISR+0x4a>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <xQueueGenericSendFromISR+0x4c>
 80018b2:	2300      	movs	r3, #0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <xQueueGenericSendFromISR+0x54>
 80018b8:	b672      	cpsid	i
 80018ba:	e7fe      	b.n	80018ba <xQueueGenericSendFromISR+0x52>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80018bc:	f001 fb9a 	bl	8002ff4 <ulSetInterruptMaskFromISR>
 80018c0:	0003      	movs	r3, r0
 80018c2:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d302      	bcc.n	80018d6 <xQueueGenericSendFromISR+0x6e>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d139      	bne.n	800194a <xQueueGenericSendFromISR+0xe2>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80018d6:	241b      	movs	r4, #27
 80018d8:	193b      	adds	r3, r7, r4
 80018da:	6a3a      	ldr	r2, [r7, #32]
 80018dc:	2145      	movs	r1, #69	; 0x45
 80018de:	5c52      	ldrb	r2, [r2, r1]
 80018e0:	701a      	strb	r2, [r3, #0]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e6:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 f8e7 	bl	8001ac2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80018f4:	193b      	adds	r3, r7, r4
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	d111      	bne.n	8001922 <xQueueGenericSendFromISR+0xba>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01e      	beq.n	8001944 <xQueueGenericSendFromISR+0xdc>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	3324      	adds	r3, #36	; 0x24
 800190a:	0018      	movs	r0, r3
 800190c:	f000 fd8e 	bl	800242c <xTaskRemoveFromEventList>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d017      	beq.n	8001944 <xQueueGenericSendFromISR+0xdc>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d014      	beq.n	8001944 <xQueueGenericSendFromISR+0xdc>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e010      	b.n	8001944 <xQueueGenericSendFromISR+0xdc>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001922:	231b      	movs	r3, #27
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b25b      	sxtb	r3, r3
 800192a:	2b7f      	cmp	r3, #127	; 0x7f
 800192c:	d101      	bne.n	8001932 <xQueueGenericSendFromISR+0xca>
 800192e:	b672      	cpsid	i
 8001930:	e7fe      	b.n	8001930 <xQueueGenericSendFromISR+0xc8>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001932:	231b      	movs	r3, #27
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	b259      	sxtb	r1, r3
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	2245      	movs	r2, #69	; 0x45
 8001942:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
        {
 8001948:	e001      	b.n	800194e <xQueueGenericSendFromISR+0xe6>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	0018      	movs	r0, r3
 8001952:	f001 fb55 	bl	8003000 <vClearInterruptMaskFromISR>

    return xReturn;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b00b      	add	sp, #44	; 0x2c
 800195e:	bd90      	pop	{r4, r7, pc}

08001960 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <xQueueReceive+0x1e>
 800197a:	b672      	cpsid	i
 800197c:	e7fe      	b.n	800197c <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <xQueueReceive+0x2c>
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <xQueueReceive+0x30>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <xQueueReceive+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <xQueueReceive+0x3a>
 8001996:	b672      	cpsid	i
 8001998:	e7fe      	b.n	8001998 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800199a:	f000 febd 	bl	8002718 <xTaskGetSchedulerState>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d102      	bne.n	80019a8 <xQueueReceive+0x48>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <xQueueReceive+0x4c>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <xQueueReceive+0x4e>
 80019ac:	2300      	movs	r3, #0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <xQueueReceive+0x56>
 80019b2:	b672      	cpsid	i
 80019b4:	e7fe      	b.n	80019b4 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80019b6:	f001 faf3 	bl	8002fa0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <xQueueReceive+0x94>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f000 f8e3 	bl	8001b98 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	1e5a      	subs	r2, r3, #1
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <xQueueReceive+0x8c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	3310      	adds	r3, #16
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 fd20 	bl	800242c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80019ec:	f001 faea 	bl	8002fc4 <vPortExitCritical>
                return pdPASS;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e062      	b.n	8001aba <xQueueReceive+0x15a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <xQueueReceive+0xa2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80019fa:	f001 fae3 	bl	8002fc4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e05b      	b.n	8001aba <xQueueReceive+0x15a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d106      	bne.n	8001a16 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001a08:	2314      	movs	r3, #20
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 fd69 	bl	80024e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001a16:	f001 fad5 	bl	8002fc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001a1a:	f000 fb43 	bl	80020a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001a1e:	f001 fabf 	bl	8002fa0 <vPortEnterCritical>
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	2244      	movs	r2, #68	; 0x44
 8001a26:	5c9b      	ldrb	r3, [r3, r2]
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	d103      	bne.n	8001a36 <xQueueReceive+0xd6>
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2244      	movs	r2, #68	; 0x44
 8001a32:	2100      	movs	r1, #0
 8001a34:	5499      	strb	r1, [r3, r2]
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	2245      	movs	r2, #69	; 0x45
 8001a3a:	5c9b      	ldrb	r3, [r3, r2]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	d103      	bne.n	8001a4a <xQueueReceive+0xea>
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	2245      	movs	r2, #69	; 0x45
 8001a46:	2100      	movs	r1, #0
 8001a48:	5499      	strb	r1, [r3, r2]
 8001a4a:	f001 fabb 	bl	8002fc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a4e:	1d3a      	adds	r2, r7, #4
 8001a50:	2314      	movs	r3, #20
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	0011      	movs	r1, r2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 fd58 	bl	800250c <xTaskCheckForTimeOut>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d11e      	bne.n	8001a9e <xQueueReceive+0x13e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 f91c 	bl	8001ca0 <prvIsQueueEmpty>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d011      	beq.n	8001a90 <xQueueReceive+0x130>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	3324      	adds	r3, #36	; 0x24
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 fc95 	bl	80023a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f8b1 	bl	8001be4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001a82:	f000 fb1b 	bl	80020bc <xTaskResumeAll>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d195      	bne.n	80019b6 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8001a8a:	f001 fa79 	bl	8002f80 <vPortYield>
 8001a8e:	e792      	b.n	80019b6 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 f8a6 	bl	8001be4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001a98:	f000 fb10 	bl	80020bc <xTaskResumeAll>
 8001a9c:	e78b      	b.n	80019b6 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 f89f 	bl	8001be4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001aa6:	f000 fb09 	bl	80020bc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 f8f7 	bl	8001ca0 <prvIsQueueEmpty>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d100      	bne.n	8001ab8 <xQueueReceive+0x158>
 8001ab6:	e77e      	b.n	80019b6 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001ab8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b00a      	add	sp, #40	; 0x28
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10e      	bne.n	8001afe <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d14e      	bne.n	8001b86 <prvCopyDataToQueue+0xc4>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fe2f 	bl	8002750 <xTaskPriorityDisinherit>
 8001af2:	0003      	movs	r3, r0
 8001af4:	617b      	str	r3, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	e043      	b.n	8001b86 <prvCopyDataToQueue+0xc4>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d119      	bne.n	8001b38 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6858      	ldr	r0, [r3, #4]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0019      	movs	r1, r3
 8001b10:	f001 fcc8 	bl	80034a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	18d2      	adds	r2, r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d32b      	bcc.n	8001b86 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	e026      	b.n	8001b86 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	68d8      	ldr	r0, [r3, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	0019      	movs	r1, r3
 8001b44:	f001 fcae 	bl	80034a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	425b      	negs	r3, r3
 8001b52:	18d2      	adds	r2, r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	18d2      	adds	r2, r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d105      	bne.n	8001b86 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001b8e:	697b      	ldr	r3, [r7, #20]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d018      	beq.n	8001bdc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	18d2      	adds	r2, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d303      	bcc.n	8001bcc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68d9      	ldr	r1, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f001 fc64 	bl	80034a4 <memcpy>
    }
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001bec:	f001 f9d8 	bl	8002fa0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	2145      	movs	r1, #69	; 0x45
 8001bf8:	5c52      	ldrb	r2, [r2, r1]
 8001bfa:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bfc:	e013      	b.n	8001c26 <prvUnlockQueue+0x42>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d016      	beq.n	8001c34 <prvUnlockQueue+0x50>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3324      	adds	r3, #36	; 0x24
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 fc0e 	bl	800242c <xTaskRemoveFromEventList>
 8001c10:	1e03      	subs	r3, r0, #0
 8001c12:	d001      	beq.n	8001c18 <prvUnlockQueue+0x34>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001c14:	f000 fcce 	bl	80025b4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001c18:	210f      	movs	r1, #15
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c26:	230f      	movs	r3, #15
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dce5      	bgt.n	8001bfe <prvUnlockQueue+0x1a>
 8001c32:	e000      	b.n	8001c36 <prvUnlockQueue+0x52>
                        break;
 8001c34:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2245      	movs	r2, #69	; 0x45
 8001c3a:	21ff      	movs	r1, #255	; 0xff
 8001c3c:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001c3e:	f001 f9c1 	bl	8002fc4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001c42:	f001 f9ad 	bl	8002fa0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001c46:	230e      	movs	r3, #14
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	2144      	movs	r1, #68	; 0x44
 8001c4e:	5c52      	ldrb	r2, [r2, r1]
 8001c50:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c52:	e013      	b.n	8001c7c <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d016      	beq.n	8001c8a <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3310      	adds	r3, #16
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 fbe3 	bl	800242c <xTaskRemoveFromEventList>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001c6a:	f000 fca3 	bl	80025b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001c6e:	210e      	movs	r1, #14
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c7c:	230e      	movs	r3, #14
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	dce5      	bgt.n	8001c54 <prvUnlockQueue+0x70>
 8001c88:	e000      	b.n	8001c8c <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001c8a:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2244      	movs	r2, #68	; 0x44
 8001c90:	21ff      	movs	r1, #255	; 0xff
 8001c92:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001c94:	f001 f996 	bl	8002fc4 <vPortExitCritical>
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001ca8:	f001 f97a 	bl	8002fa0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e001      	b.n	8001cbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001cbe:	f001 f981 	bl	8002fc4 <vPortExitCritical>

    return xReturn;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001cd4:	f001 f964 	bl	8002fa0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d102      	bne.n	8001cea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e001      	b.n	8001cee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001cee:	f001 f969 	bl	8002fc4 <vPortExitCritical>

    return xReturn;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b004      	add	sp, #16
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e015      	b.n	8001d38 <vQueueAddToRegistry+0x3c>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <vQueueAddToRegistry+0x4c>)
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	00d2      	lsls	r2, r2, #3
 8001d12:	58d3      	ldr	r3, [r2, r3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10c      	bne.n	8001d32 <vQueueAddToRegistry+0x36>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <vQueueAddToRegistry+0x4c>)
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	00d2      	lsls	r2, r2, #3
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	50d1      	str	r1, [r2, r3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <vQueueAddToRegistry+0x4c>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	601a      	str	r2, [r3, #0]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001d30:	e006      	b.n	8001d40 <vQueueAddToRegistry+0x44>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3301      	adds	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	d9e6      	bls.n	8001d0c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200009ac 	.word	0x200009ac

08001d4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001d5c:	f001 f920 	bl	8002fa0 <vPortEnterCritical>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2244      	movs	r2, #68	; 0x44
 8001d64:	5c9b      	ldrb	r3, [r3, r2]
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	d103      	bne.n	8001d74 <vQueueWaitForMessageRestricted+0x28>
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2244      	movs	r2, #68	; 0x44
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2245      	movs	r2, #69	; 0x45
 8001d78:	5c9b      	ldrb	r3, [r3, r2]
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	d103      	bne.n	8001d88 <vQueueWaitForMessageRestricted+0x3c>
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2245      	movs	r2, #69	; 0x45
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]
 8001d88:	f001 f91c 	bl	8002fc4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3324      	adds	r3, #36	; 0x24
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 fb1f 	bl	80023e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff ff1d 	bl	8001be4 <prvUnlockQueue>
    }
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b006      	add	sp, #24
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001db2:	b590      	push	{r4, r7, lr}
 8001db4:	b08d      	sub	sp, #52	; 0x34
 8001db6:	af04      	add	r7, sp, #16
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	1dbb      	adds	r3, r7, #6
 8001dc0:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f001 f981 	bl	80030d0 <pvPortMalloc>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	617b      	str	r3, [r7, #20]

                if( pxStack != NULL )
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <xTaskCreate+0x48>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001dd8:	2054      	movs	r0, #84	; 0x54
 8001dda:	f001 f979 	bl	80030d0 <pvPortMalloc>
 8001dde:	0003      	movs	r3, r0
 8001de0:	61fb      	str	r3, [r7, #28]

                    if( pxNewTCB != NULL )
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <xTaskCreate+0x3e>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
 8001dee:	e006      	b.n	8001dfe <xTaskCreate+0x4c>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f001 fa2c 	bl	8003250 <vPortFree>
 8001df8:	e001      	b.n	8001dfe <xTaskCreate+0x4c>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d016      	beq.n	8001e32 <xTaskCreate+0x80>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e04:	1dbb      	adds	r3, r7, #6
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	683c      	ldr	r4, [r7, #0]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9303      	str	r3, [sp, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	0023      	movs	r3, r4
 8001e20:	f000 f810 	bl	8001e44 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 f89c 	bl	8001f64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	e002      	b.n	8001e38 <xTaskCreate+0x86>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001e32:	2301      	movs	r3, #1
 8001e34:	425b      	negs	r3, r3
 8001e36:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001e38:	69bb      	ldr	r3, [r7, #24]
    }
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b009      	add	sp, #36	; 0x24
 8001e40:	bd90      	pop	{r4, r7, pc}
	...

08001e44 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	21a5      	movs	r1, #165	; 0xa5
 8001e5e:	f001 fb2a 	bl	80034b6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	493d      	ldr	r1, [pc, #244]	; (8001f60 <prvInitialiseNewTask+0x11c>)
 8001e6a:	468c      	mov	ip, r1
 8001e6c:	4463      	add	r3, ip
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	18d3      	adds	r3, r2, r3
 8001e72:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2207      	movs	r2, #7
 8001e78:	4393      	bics	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2207      	movs	r2, #7
 8001e80:	4013      	ands	r3, r2
 8001e82:	d001      	beq.n	8001e88 <prvInitialiseNewTask+0x44>
 8001e84:	b672      	cpsid	i
 8001e86:	e7fe      	b.n	8001e86 <prvInitialiseNewTask+0x42>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d020      	beq.n	8001ed0 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e013      	b.n	8001ebc <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	7818      	ldrb	r0, [r3, #0]
 8001e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e9e:	2134      	movs	r1, #52	; 0x34
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	18d3      	adds	r3, r2, r3
 8001ea4:	185b      	adds	r3, r3, r1
 8001ea6:	1c02      	adds	r2, r0, #0
 8001ea8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	18d3      	adds	r3, r2, r3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d9e8      	bls.n	8001e94 <prvInitialiseNewTask+0x50>
 8001ec2:	e000      	b.n	8001ec6 <prvInitialiseNewTask+0x82>
            {
                break;
 8001ec4:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	2238      	movs	r2, #56	; 0x38
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]
 8001ece:	e003      	b.n	8001ed8 <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	2234      	movs	r2, #52	; 0x34
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	5499      	strb	r1, [r3, r2]
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d901      	bls.n	8001ee2 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	6a3a      	ldr	r2, [r7, #32]
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	6a3a      	ldr	r2, [r7, #32]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff fab3 	bl	8001464 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	3318      	adds	r3, #24
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff faae 	bl	8001464 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f0c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	2205      	movs	r2, #5
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	334c      	adds	r3, #76	; 0x4c
 8001f22:	2204      	movs	r2, #4
 8001f24:	2100      	movs	r1, #0
 8001f26:	0018      	movs	r0, r3
 8001f28:	f001 fac5 	bl	80034b6 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	3350      	adds	r3, #80	; 0x50
 8001f30:	2201      	movs	r2, #1
 8001f32:	2100      	movs	r1, #0
 8001f34:	0018      	movs	r0, r3
 8001f36:	f001 fabe 	bl	80034b6 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	68f9      	ldr	r1, [r7, #12]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 ff95 	bl	8002e70 <pxPortInitialiseStack>
 8001f46:	0002      	movs	r2, r0
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f56:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b006      	add	sp, #24
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	3fffffff 	.word	0x3fffffff

08001f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001f6c:	f001 f818 	bl	8002fa0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <prvAddNewTaskToReadyList+0xa8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <prvAddNewTaskToReadyList+0xa8>)
 8001f78:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <prvAddNewTaskToReadyList+0xac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <prvAddNewTaskToReadyList+0xac>)
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <prvAddNewTaskToReadyList+0xa8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d110      	bne.n	8001fb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001f90:	f000 fb24 	bl	80025dc <prvInitialiseTaskLists>
 8001f94:	e00d      	b.n	8001fb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <prvAddNewTaskToReadyList+0xb0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <prvAddNewTaskToReadyList+0xac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d802      	bhi.n	8001fb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <prvAddNewTaskToReadyList+0xac>)
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <prvAddNewTaskToReadyList+0xb4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <prvAddNewTaskToReadyList+0xb4>)
 8001fba:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <prvAddNewTaskToReadyList+0xb4>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <prvAddNewTaskToReadyList+0xb8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d903      	bls.n	8001fd8 <prvAddNewTaskToReadyList+0x74>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <prvAddNewTaskToReadyList+0xb8>)
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fdc:	0013      	movs	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	189b      	adds	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <prvAddNewTaskToReadyList+0xbc>)
 8001fe6:	189a      	adds	r2, r3, r2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	0019      	movs	r1, r3
 8001fee:	0010      	movs	r0, r2
 8001ff0:	f7ff fa43 	bl	800147a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ff4:	f000 ffe6 	bl	8002fc4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <prvAddNewTaskToReadyList+0xb0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <prvAddNewTaskToReadyList+0xa0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <prvAddNewTaskToReadyList+0xac>)
 8002002:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000104 	.word	0x20000104
 8002010:	2000002c 	.word	0x2000002c
 8002014:	20000110 	.word	0x20000110
 8002018:	20000120 	.word	0x20000120
 800201c:	2000010c 	.word	0x2000010c
 8002020:	20000030 	.word	0x20000030

08002024 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800202a:	4917      	ldr	r1, [pc, #92]	; (8002088 <vTaskStartScheduler+0x64>)
 800202c:	4817      	ldr	r0, [pc, #92]	; (800208c <vTaskStartScheduler+0x68>)
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <vTaskStartScheduler+0x6c>)
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	2300      	movs	r3, #0
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	223c      	movs	r2, #60	; 0x3c
 800203a:	f7ff feba 	bl	8001db2 <xTaskCreate>
 800203e:	0003      	movs	r3, r0
 8002040:	607b      	str	r3, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d103      	bne.n	8002050 <vTaskStartScheduler+0x2c>
            {
                xReturn = xTimerCreateTimerTask();
 8002048:	f000 fc32 	bl	80028b0 <xTimerCreateTimerTask>
 800204c:	0003      	movs	r3, r0
 800204e:	607b      	str	r3, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10d      	bne.n	8002072 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8002056:	b672      	cpsid	i
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <vTaskStartScheduler+0x70>)
 800205a:	2201      	movs	r2, #1
 800205c:	4252      	negs	r2, r2
 800205e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <vTaskStartScheduler+0x74>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <vTaskStartScheduler+0x78>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800206c:	f000 ff64 	bl	8002f38 <xPortStartScheduler>
 8002070:	e004      	b.n	800207c <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3301      	adds	r3, #1
 8002076:	d101      	bne.n	800207c <vTaskStartScheduler+0x58>
 8002078:	b672      	cpsid	i
 800207a:	e7fe      	b.n	800207a <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <vTaskStartScheduler+0x7c>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}
 8002088:	0800350c 	.word	0x0800350c
 800208c:	080025c9 	.word	0x080025c9
 8002090:	20000128 	.word	0x20000128
 8002094:	20000124 	.word	0x20000124
 8002098:	20000110 	.word	0x20000110
 800209c:	20000108 	.word	0x20000108
 80020a0:	20000008 	.word	0x20000008

080020a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <vTaskSuspendAll+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <vTaskSuspendAll+0x14>)
 80020b0:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000012c 	.word	0x2000012c

080020bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <xTaskResumeAll+0xec>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <xTaskResumeAll+0x1a>
 80020d2:	b672      	cpsid	i
 80020d4:	e7fe      	b.n	80020d4 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80020d6:	f000 ff63 	bl	8002fa0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80020da:	4b33      	ldr	r3, [pc, #204]	; (80021a8 <xTaskResumeAll+0xec>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1e5a      	subs	r2, r3, #1
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <xTaskResumeAll+0xec>)
 80020e2:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e4:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <xTaskResumeAll+0xec>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d155      	bne.n	8002198 <xTaskResumeAll+0xdc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <xTaskResumeAll+0xf0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d051      	beq.n	8002198 <xTaskResumeAll+0xdc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020f4:	e02f      	b.n	8002156 <xTaskResumeAll+0x9a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020f6:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <xTaskResumeAll+0xf4>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3318      	adds	r3, #24
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff fa11 	bl	800152a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3304      	adds	r3, #4
 800210c:	0018      	movs	r0, r3
 800210e:	f7ff fa0c 	bl	800152a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <xTaskResumeAll+0xf8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d903      	bls.n	8002126 <xTaskResumeAll+0x6a>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <xTaskResumeAll+0xf8>)
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212a:	0013      	movs	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	189b      	adds	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <xTaskResumeAll+0xfc>)
 8002134:	189a      	adds	r2, r3, r2
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	0019      	movs	r1, r3
 800213c:	0010      	movs	r0, r2
 800213e:	f7ff f99c 	bl	800147a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <xTaskResumeAll+0x100>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <xTaskResumeAll+0x9a>
                    {
                        xYieldPending = pdTRUE;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <xTaskResumeAll+0x104>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <xTaskResumeAll+0xf4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1cb      	bne.n	80020f6 <xTaskResumeAll+0x3a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <xTaskResumeAll+0xac>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002164:	f000 fabe 	bl	80026e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <xTaskResumeAll+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00f      	beq.n	8002194 <xTaskResumeAll+0xd8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002174:	f000 f836 	bl	80021e4 <xTaskIncrementTick>
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	d002      	beq.n	8002182 <xTaskResumeAll+0xc6>
                            {
                                xYieldPending = pdTRUE;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <xTaskResumeAll+0x104>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3b01      	subs	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f2      	bne.n	8002174 <xTaskResumeAll+0xb8>

                        xPendedTicks = 0;
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <xTaskResumeAll+0x108>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <xTaskResumeAll+0x104>)
 8002196:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002198:	f000 ff14 	bl	8002fc4 <vPortExitCritical>

    return xAlreadyYielded;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	2000012c 	.word	0x2000012c
 80021ac:	20000104 	.word	0x20000104
 80021b0:	200000c4 	.word	0x200000c4
 80021b4:	2000010c 	.word	0x2000010c
 80021b8:	20000030 	.word	0x20000030
 80021bc:	2000002c 	.word	0x2000002c
 80021c0:	20000118 	.word	0x20000118
 80021c4:	20000114 	.word	0x20000114

080021c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <xTaskGetTickCount+0x18>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b002      	add	sp, #8
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	20000108 	.word	0x20000108

080021e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <xTaskIncrementTick+0xf8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d167      	bne.n	80022c6 <xTaskIncrementTick+0xe2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80021f6:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <xTaskIncrementTick+0xfc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <xTaskIncrementTick+0xfc>)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d117      	bne.n	800223a <xTaskIncrementTick+0x56>
        {
            taskSWITCH_DELAYED_LISTS();
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <xTaskIncrementTick+0x100>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <xTaskIncrementTick+0x34>
 8002214:	b672      	cpsid	i
 8002216:	e7fe      	b.n	8002216 <xTaskIncrementTick+0x32>
 8002218:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <xTaskIncrementTick+0x100>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <xTaskIncrementTick+0x104>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <xTaskIncrementTick+0x100>)
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <xTaskIncrementTick+0x104>)
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <xTaskIncrementTick+0x108>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <xTaskIncrementTick+0x108>)
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f000 fa55 	bl	80026e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <xTaskIncrementTick+0x10c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	429a      	cmp	r2, r3
 8002242:	d345      	bcc.n	80022d0 <xTaskIncrementTick+0xec>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <xTaskIncrementTick+0x100>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <xTaskIncrementTick+0x74>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <xTaskIncrementTick+0x10c>)
 8002250:	2201      	movs	r2, #1
 8002252:	4252      	negs	r2, r2
 8002254:	601a      	str	r2, [r3, #0]
                    break;
 8002256:	e03b      	b.n	80022d0 <xTaskIncrementTick+0xec>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <xTaskIncrementTick+0x100>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d203      	bcs.n	8002278 <xTaskIncrementTick+0x94>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <xTaskIncrementTick+0x10c>)
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002276:	e02b      	b.n	80022d0 <xTaskIncrementTick+0xec>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3304      	adds	r3, #4
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff f954 	bl	800152a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <xTaskIncrementTick+0xb0>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3318      	adds	r3, #24
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff f94b 	bl	800152a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <xTaskIncrementTick+0x110>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d903      	bls.n	80022a8 <xTaskIncrementTick+0xc4>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <xTaskIncrementTick+0x110>)
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ac:	0013      	movs	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	189b      	adds	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <xTaskIncrementTick+0x114>)
 80022b6:	189a      	adds	r2, r3, r2
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3304      	adds	r3, #4
 80022bc:	0019      	movs	r1, r3
 80022be:	0010      	movs	r0, r2
 80022c0:	f7ff f8db 	bl	800147a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022c4:	e7be      	b.n	8002244 <xTaskIncrementTick+0x60>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <xTaskIncrementTick+0x118>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <xTaskIncrementTick+0x118>)
 80022ce:	601a      	str	r2, [r3, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80022d0:	697b      	ldr	r3, [r7, #20]
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b006      	add	sp, #24
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	2000012c 	.word	0x2000012c
 80022e0:	20000108 	.word	0x20000108
 80022e4:	200000bc 	.word	0x200000bc
 80022e8:	200000c0 	.word	0x200000c0
 80022ec:	2000011c 	.word	0x2000011c
 80022f0:	20000124 	.word	0x20000124
 80022f4:	2000010c 	.word	0x2000010c
 80022f8:	20000030 	.word	0x20000030
 80022fc:	20000114 	.word	0x20000114

08002300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <vTaskSwitchContext+0x90>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <vTaskSwitchContext+0x94>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002314:	e037      	b.n	8002386 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <vTaskSwitchContext+0x94>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <vTaskSwitchContext+0x98>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	e007      	b.n	8002334 <vTaskSwitchContext+0x34>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <vTaskSwitchContext+0x2e>
 800232a:	b672      	cpsid	i
 800232c:	e7fe      	b.n	800232c <vTaskSwitchContext+0x2c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3b01      	subs	r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	4919      	ldr	r1, [pc, #100]	; (800239c <vTaskSwitchContext+0x9c>)
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	0013      	movs	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	189b      	adds	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	585b      	ldr	r3, [r3, r1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0ee      	beq.n	8002324 <vTaskSwitchContext+0x24>
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	0013      	movs	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	189b      	adds	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <vTaskSwitchContext+0x9c>)
 8002352:	189b      	adds	r3, r3, r2
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3308      	adds	r3, #8
 8002368:	429a      	cmp	r2, r3
 800236a:	d104      	bne.n	8002376 <vTaskSwitchContext+0x76>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <vTaskSwitchContext+0xa0>)
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <vTaskSwitchContext+0x98>)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	2000012c 	.word	0x2000012c
 8002394:	20000118 	.word	0x20000118
 8002398:	2000010c 	.word	0x2000010c
 800239c:	20000030 	.word	0x20000030
 80023a0:	2000002c 	.word	0x2000002c

080023a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <vTaskPlaceOnEventList+0x14>
 80023b4:	b672      	cpsid	i
 80023b6:	e7fe      	b.n	80023b6 <vTaskPlaceOnEventList+0x12>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <vTaskPlaceOnEventList+0x38>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3318      	adds	r3, #24
 80023be:	001a      	movs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0011      	movs	r1, r2
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff f87a 	bl	80014be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 fa1a 	bl	8002808 <prvAddCurrentTaskToDelayedList>
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000002c 	.word	0x2000002c

080023e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <vTaskPlaceOnEventListRestricted+0x16>
 80023f2:	b672      	cpsid	i
 80023f4:	e7fe      	b.n	80023f4 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <vTaskPlaceOnEventListRestricted+0x48>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3318      	adds	r3, #24
 80023fc:	001a      	movs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0011      	movs	r1, r2
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff f839 	bl	800147a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <vTaskPlaceOnEventListRestricted+0x34>
        {
            xTicksToWait = portMAX_DELAY;
 800240e:	2301      	movs	r3, #1
 8002410:	425b      	negs	r3, r3
 8002412:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f000 f9f4 	bl	8002808 <prvAddCurrentTaskToDelayedList>
    }
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b004      	add	sp, #16
 8002426:	bd80      	pop	{r7, pc}
 8002428:	2000002c 	.word	0x2000002c

0800242c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <xTaskRemoveFromEventList+0x1a>
 8002442:	b672      	cpsid	i
 8002444:	e7fe      	b.n	8002444 <xTaskRemoveFromEventList+0x18>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3318      	adds	r3, #24
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff f86d 	bl	800152a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <xTaskRemoveFromEventList+0xa0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d11d      	bne.n	8002494 <xTaskRemoveFromEventList+0x68>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3304      	adds	r3, #4
 800245c:	0018      	movs	r0, r3
 800245e:	f7ff f864 	bl	800152a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <xTaskRemoveFromEventList+0xa4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d903      	bls.n	8002476 <xTaskRemoveFromEventList+0x4a>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <xTaskRemoveFromEventList+0xa4>)
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247a:	0013      	movs	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	189b      	adds	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <xTaskRemoveFromEventList+0xa8>)
 8002484:	189a      	adds	r2, r3, r2
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3304      	adds	r3, #4
 800248a:	0019      	movs	r1, r3
 800248c:	0010      	movs	r0, r2
 800248e:	f7fe fff4 	bl	800147a <vListInsertEnd>
 8002492:	e007      	b.n	80024a4 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3318      	adds	r3, #24
 8002498:	001a      	movs	r2, r3
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <xTaskRemoveFromEventList+0xac>)
 800249c:	0011      	movs	r1, r2
 800249e:	0018      	movs	r0, r3
 80024a0:	f7fe ffeb 	bl	800147a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <xTaskRemoveFromEventList+0xb0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d905      	bls.n	80024be <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <xTaskRemoveFromEventList+0xb4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e001      	b.n	80024c2 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	2000012c 	.word	0x2000012c
 80024d0:	2000010c 	.word	0x2000010c
 80024d4:	20000030 	.word	0x20000030
 80024d8:	200000c4 	.word	0x200000c4
 80024dc:	2000002c 	.word	0x2000002c
 80024e0:	20000118 	.word	0x20000118

080024e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <vTaskInternalSetTimeOutState+0x20>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <vTaskInternalSetTimeOutState+0x24>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}
 8002504:	2000011c 	.word	0x2000011c
 8002508:	20000108 	.word	0x20000108

0800250c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <xTaskCheckForTimeOut+0x14>
 800251c:	b672      	cpsid	i
 800251e:	e7fe      	b.n	800251e <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <xTaskCheckForTimeOut+0x1e>
 8002526:	b672      	cpsid	i
 8002528:	e7fe      	b.n	8002528 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800252a:	f000 fd39 	bl	8002fa0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800252e:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <xTaskCheckForTimeOut+0xa0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	d102      	bne.n	800254c <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e027      	b.n	800259c <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <xTaskCheckForTimeOut+0xa4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d00a      	beq.n	800256e <xTaskCheckForTimeOut+0x62>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	429a      	cmp	r2, r3
 8002560:	d305      	bcc.n	800256e <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002562:	2301      	movs	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e016      	b.n	800259c <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	429a      	cmp	r2, r3
 8002576:	d20c      	bcs.n	8002592 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff ffac 	bl	80024e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e004      	b.n	800259c <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002598:	2301      	movs	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800259c:	f000 fd12 	bl	8002fc4 <vPortExitCritical>

    return xReturn;
 80025a0:	697b      	ldr	r3, [r7, #20]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b006      	add	sp, #24
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000108 	.word	0x20000108
 80025b0:	2000011c 	.word	0x2000011c

080025b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <vTaskMissedYield+0x10>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000118 	.word	0x20000118

080025c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80025d0:	f000 f848 	bl	8002664 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80025d4:	f000 fcd4 	bl	8002f80 <vPortYield>
        prvCheckTasksWaitingTermination();
 80025d8:	e7fa      	b.n	80025d0 <prvIdleTask+0x8>
	...

080025dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	e00c      	b.n	8002602 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	0013      	movs	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <prvInitialiseTaskLists+0x68>)
 80025f4:	189b      	adds	r3, r3, r2
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7fe ff16 	bl	8001428 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3301      	adds	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d9ef      	bls.n	80025e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <prvInitialiseTaskLists+0x6c>)
 800260a:	0018      	movs	r0, r3
 800260c:	f7fe ff0c 	bl	8001428 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <prvInitialiseTaskLists+0x70>)
 8002612:	0018      	movs	r0, r3
 8002614:	f7fe ff08 	bl	8001428 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <prvInitialiseTaskLists+0x74>)
 800261a:	0018      	movs	r0, r3
 800261c:	f7fe ff04 	bl	8001428 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <prvInitialiseTaskLists+0x78>)
 8002622:	0018      	movs	r0, r3
 8002624:	f7fe ff00 	bl	8001428 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <prvInitialiseTaskLists+0x7c>)
 800262a:	0018      	movs	r0, r3
 800262c:	f7fe fefc 	bl	8001428 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <prvInitialiseTaskLists+0x80>)
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <prvInitialiseTaskLists+0x6c>)
 8002634:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <prvInitialiseTaskLists+0x84>)
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <prvInitialiseTaskLists+0x70>)
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000030 	.word	0x20000030
 8002648:	20000094 	.word	0x20000094
 800264c:	200000a8 	.word	0x200000a8
 8002650:	200000c4 	.word	0x200000c4
 8002654:	200000d8 	.word	0x200000d8
 8002658:	200000f0 	.word	0x200000f0
 800265c:	200000bc 	.word	0x200000bc
 8002660:	200000c0 	.word	0x200000c0

08002664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800266a:	e01a      	b.n	80026a2 <prvCheckTasksWaitingTermination+0x3e>
            {
                taskENTER_CRITICAL();
 800266c:	f000 fc98 	bl	8002fa0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <prvCheckTasksWaitingTermination+0x50>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	0018      	movs	r0, r3
 800267e:	f7fe ff54 	bl	800152a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <prvCheckTasksWaitingTermination+0x54>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1e5a      	subs	r2, r3, #1
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <prvCheckTasksWaitingTermination+0x54>)
 800268a:	601a      	str	r2, [r3, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <prvCheckTasksWaitingTermination+0x58>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <prvCheckTasksWaitingTermination+0x58>)
 8002694:	601a      	str	r2, [r3, #0]
                }
                taskEXIT_CRITICAL();
 8002696:	f000 fc95 	bl	8002fc4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f80f 	bl	80026c0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <prvCheckTasksWaitingTermination+0x58>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e0      	bne.n	800266c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200000d8 	.word	0x200000d8
 80026b8:	20000104 	.word	0x20000104
 80026bc:	200000ec 	.word	0x200000ec

080026c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fdbf 	bl	8003250 <vPortFree>
                vPortFree( pxTCB );
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 fdbb 	bl	8003250 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <prvResetNextTaskUnblockTime+0x2c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <prvResetNextTaskUnblockTime+0x30>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	4252      	negs	r2, r2
 80026f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80026fa:	e005      	b.n	8002708 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <prvResetNextTaskUnblockTime+0x2c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <prvResetNextTaskUnblockTime+0x30>)
 8002706:	601a      	str	r2, [r3, #0]
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	200000bc 	.word	0x200000bc
 8002714:	20000124 	.word	0x20000124

08002718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <xTaskGetSchedulerState+0x30>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002726:	2301      	movs	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	e008      	b.n	800273e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <xTaskGetSchedulerState+0x34>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002734:	2302      	movs	r3, #2
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e001      	b.n	800273e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800273e:	687b      	ldr	r3, [r7, #4]
    }
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000110 	.word	0x20000110
 800274c:	2000012c 	.word	0x2000012c

08002750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d044      	beq.n	80027f0 <xTaskPriorityDisinherit+0xa0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <xTaskPriorityDisinherit+0xac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <xTaskPriorityDisinherit+0x24>
 8002770:	b672      	cpsid	i
 8002772:	e7fe      	b.n	8002772 <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <xTaskPriorityDisinherit+0x30>
 800277c:	b672      	cpsid	i
 800277e:	e7fe      	b.n	800277e <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	429a      	cmp	r2, r3
 8002794:	d02c      	beq.n	80027f0 <xTaskPriorityDisinherit+0xa0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d128      	bne.n	80027f0 <xTaskPriorityDisinherit+0xa0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3304      	adds	r3, #4
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fe fec1 	bl	800152a <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	2205      	movs	r2, #5
 80027b6:	1ad2      	subs	r2, r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <xTaskPriorityDisinherit+0xb0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d903      	bls.n	80027d0 <xTaskPriorityDisinherit+0x80>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <xTaskPriorityDisinherit+0xb0>)
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	0013      	movs	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4a09      	ldr	r2, [pc, #36]	; (8002804 <xTaskPriorityDisinherit+0xb4>)
 80027de:	189a      	adds	r2, r3, r2
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	3304      	adds	r3, #4
 80027e4:	0019      	movs	r1, r3
 80027e6:	0010      	movs	r0, r2
 80027e8:	f7fe fe47 	bl	800147a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80027f0:	68fb      	ldr	r3, [r7, #12]
    }
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b004      	add	sp, #16
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	2000002c 	.word	0x2000002c
 8002800:	2000010c 	.word	0x2000010c
 8002804:	20000030 	.word	0x20000030

08002808 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002812:	4b21      	ldr	r3, [pc, #132]	; (8002898 <prvAddCurrentTaskToDelayedList+0x90>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <prvAddCurrentTaskToDelayedList+0x94>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3304      	adds	r3, #4
 800281e:	0018      	movs	r0, r3
 8002820:	f7fe fe83 	bl	800152a <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3301      	adds	r3, #1
 8002828:	d10b      	bne.n	8002842 <prvAddCurrentTaskToDelayedList+0x3a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <prvAddCurrentTaskToDelayedList+0x94>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1d1a      	adds	r2, r3, #4
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <prvAddCurrentTaskToDelayedList+0x98>)
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f7fe fe1d 	bl	800147a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002840:	e026      	b.n	8002890 <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	18d3      	adds	r3, r2, r3
 8002848:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <prvAddCurrentTaskToDelayedList+0x94>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	429a      	cmp	r2, r3
 8002858:	d209      	bcs.n	800286e <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <prvAddCurrentTaskToDelayedList+0x94>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3304      	adds	r3, #4
 8002864:	0019      	movs	r1, r3
 8002866:	0010      	movs	r0, r2
 8002868:	f7fe fe29 	bl	80014be <vListInsert>
}
 800286c:	e010      	b.n	8002890 <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvAddCurrentTaskToDelayedList+0x94>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3304      	adds	r3, #4
 8002878:	0019      	movs	r1, r3
 800287a:	0010      	movs	r0, r2
 800287c:	f7fe fe1f 	bl	80014be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	d202      	bcs.n	8002890 <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000108 	.word	0x20000108
 800289c:	2000002c 	.word	0x2000002c
 80028a0:	200000f0 	.word	0x200000f0
 80028a4:	200000c0 	.word	0x200000c0
 80028a8:	200000bc 	.word	0x200000bc
 80028ac:	20000124 	.word	0x20000124

080028b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80028ba:	f000 fa9f 	bl	8002dfc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <xTimerCreateTimerTask+0x44>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80028c6:	490c      	ldr	r1, [pc, #48]	; (80028f8 <xTimerCreateTimerTask+0x48>)
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <xTimerCreateTimerTask+0x4c>)
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <xTimerCreateTimerTask+0x50>)
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2302      	movs	r3, #2
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	2250      	movs	r2, #80	; 0x50
 80028d6:	f7ff fa6c 	bl	8001db2 <xTaskCreate>
 80028da:	0003      	movs	r3, r0
 80028dc:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <xTimerCreateTimerTask+0x38>
 80028e4:	b672      	cpsid	i
 80028e6:	e7fe      	b.n	80028e6 <xTimerCreateTimerTask+0x36>
        return xReturn;
 80028e8:	687b      	ldr	r3, [r7, #4]
    }
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	20000160 	.word	0x20000160
 80028f8:	08003514 	.word	0x08003514
 80028fc:	08002a21 	.word	0x08002a21
 8002900:	20000164 	.word	0x20000164

08002904 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <xTimerGenericCommand+0x1c>
 800291c:	b672      	cpsid	i
 800291e:	e7fe      	b.n	800291e <xTimerGenericCommand+0x1a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <xTimerGenericCommand+0x90>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d030      	beq.n	800298a <xTimerGenericCommand+0x86>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002928:	2410      	movs	r4, #16
 800292a:	193b      	adds	r3, r7, r4
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	601a      	str	r2, [r3, #0]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002930:	193b      	adds	r3, r7, r4
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	605a      	str	r2, [r3, #4]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002936:	193b      	adds	r3, r7, r4
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	609a      	str	r2, [r3, #8]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b05      	cmp	r3, #5
 8002940:	dc19      	bgt.n	8002976 <xTimerGenericCommand+0x72>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002942:	f7ff fee9 	bl	8002718 <xTaskGetSchedulerState>
 8002946:	0003      	movs	r3, r0
 8002948:	2b02      	cmp	r3, #2
 800294a:	d109      	bne.n	8002960 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <xTimerGenericCommand+0x90>)
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002952:	1939      	adds	r1, r7, r4
 8002954:	2300      	movs	r3, #0
 8002956:	f7fe fecd 	bl	80016f4 <xQueueGenericSend>
 800295a:	0003      	movs	r3, r0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e014      	b.n	800298a <xTimerGenericCommand+0x86>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <xTimerGenericCommand+0x90>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	2310      	movs	r3, #16
 8002966:	18f9      	adds	r1, r7, r3
 8002968:	2300      	movs	r3, #0
 800296a:	2200      	movs	r2, #0
 800296c:	f7fe fec2 	bl	80016f4 <xQueueGenericSend>
 8002970:	0003      	movs	r3, r0
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	e009      	b.n	800298a <xTimerGenericCommand+0x86>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <xTimerGenericCommand+0x90>)
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	2310      	movs	r3, #16
 800297e:	18f9      	adds	r1, r7, r3
 8002980:	2300      	movs	r3, #0
 8002982:	f7fe ff71 	bl	8001868 <xQueueGenericSendFromISR>
 8002986:	0003      	movs	r3, r0
 8002988:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800298a:	69fb      	ldr	r3, [r7, #28]
    }
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b009      	add	sp, #36	; 0x24
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	20000160 	.word	0x20000160

08002998 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <prvProcessExpiredTimer+0x84>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3304      	adds	r3, #4
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7fe fdba 	bl	800152a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2228      	movs	r2, #40	; 0x28
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	001a      	movs	r2, r3
 80029be:	2304      	movs	r3, #4
 80029c0:	4013      	ands	r3, r2
 80029c2:	d019      	beq.n	80029f8 <prvProcessExpiredTimer+0x60>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	18d1      	adds	r1, r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f8c3 	bl	8002b5c <prvInsertTimerInActiveList>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d017      	beq.n	8002a0a <prvProcessExpiredTimer+0x72>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	f7ff ff8d 	bl	8002904 <xTimerGenericCommand>
 80029ea:	0003      	movs	r3, r0
 80029ec:	60bb      	str	r3, [r7, #8]
                configASSERT( xResult );
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <prvProcessExpiredTimer+0x72>
 80029f4:	b672      	cpsid	i
 80029f6:	e7fe      	b.n	80029f6 <prvProcessExpiredTimer+0x5e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2228      	movs	r2, #40	; 0x28
 80029fc:	5c9b      	ldrb	r3, [r3, r2]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4393      	bics	r3, r2
 8002a02:	b2d9      	uxtb	r1, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2228      	movs	r2, #40	; 0x28
 8002a08:	5499      	strb	r1, [r3, r2]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	0010      	movs	r0, r2
 8002a12:	4798      	blx	r3
    }
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000158 	.word	0x20000158

08002a20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a28:	2308      	movs	r3, #8
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 f853 	bl	8002ad8 <prvGetNextExpireTime>
 8002a32:	0003      	movs	r3, r0
 8002a34:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f803 	bl	8002a48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002a42:	f000 f8cd 	bl	8002be0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a46:	e7ef      	b.n	8002a28 <prvTimerTask+0x8>

08002a48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a52:	f7ff fb27 	bl	80020a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a56:	2308      	movs	r3, #8
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f85e 	bl	8002b1c <prvSampleTimeNow>
 8002a60:	0003      	movs	r3, r0
 8002a62:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d12b      	bne.n	8002ac2 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <prvProcessTimerOrBlockTask+0x42>
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d808      	bhi.n	8002a8a <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002a78:	f7ff fb20 	bl	80020bc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0011      	movs	r1, r2
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7ff ff88 	bl	8002998 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a88:	e01d      	b.n	8002ac6 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <prvProcessTimerOrBlockTask+0x88>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <prvProcessTimerOrBlockTask+0x56>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <prvProcessTimerOrBlockTask+0x58>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <prvProcessTimerOrBlockTask+0x8c>)
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	0019      	movs	r1, r3
 8002ab0:	f7ff f94c 	bl	8001d4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002ab4:	f7ff fb02 	bl	80020bc <xTaskResumeAll>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d104      	bne.n	8002ac6 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8002abc:	f000 fa60 	bl	8002f80 <vPortYield>
    }
 8002ac0:	e001      	b.n	8002ac6 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002ac2:	f7ff fafb 	bl	80020bc <xTaskResumeAll>
    }
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b004      	add	sp, #16
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	2000015c 	.word	0x2000015c
 8002ad4:	20000160 	.word	0x20000160

08002ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <prvGetNextExpireTime+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <prvGetNextExpireTime+0x16>
 8002aea:	2201      	movs	r2, #1
 8002aec:	e000      	b.n	8002af0 <prvGetNextExpireTime+0x18>
 8002aee:	2200      	movs	r2, #0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <prvGetNextExpireTime+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e001      	b.n	8002b0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    }
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	20000158 	.word	0x20000158

08002b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002b24:	f7ff fb50 	bl	80021c8 <xTaskGetTickCount>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <prvSampleTimeNow+0x3c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d205      	bcs.n	8002b42 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002b36:	f000 f903 	bl	8002d40 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e002      	b.n	8002b48 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <prvSampleTimeNow+0x3c>)
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    }
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000168 	.word	0x20000168

08002b5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d812      	bhi.n	8002ba8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	1ad2      	subs	r2, r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d302      	bcc.n	8002b96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e01b      	b.n	8002bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <prvInsertTimerInActiveList+0x7c>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	f7fe fc8c 	bl	80014be <vListInsert>
 8002ba6:	e012      	b.n	8002bce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d206      	bcs.n	8002bbe <prvInsertTimerInActiveList+0x62>
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e007      	b.n	8002bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <prvInsertTimerInActiveList+0x80>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	0010      	movs	r0, r2
 8002bca:	f7fe fc78 	bl	80014be <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002bce:	697b      	ldr	r3, [r7, #20]
    }
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b006      	add	sp, #24
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	2000015c 	.word	0x2000015c
 8002bdc:	20000158 	.word	0x20000158

08002be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002be6:	e097      	b.n	8002d18 <prvProcessReceivedCommands+0x138>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002be8:	2208      	movs	r2, #8
 8002bea:	18bb      	adds	r3, r7, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da00      	bge.n	8002bf4 <prvProcessReceivedCommands+0x14>
 8002bf2:	e090      	b.n	8002d16 <prvProcessReceivedCommands+0x136>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002bf4:	18bb      	adds	r3, r7, r2
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <prvProcessReceivedCommands+0x2c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7fe fc8f 	bl	800152a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7ff ff84 	bl	8002b1c <prvSampleTimeNow>
 8002c14:	0003      	movs	r3, r0
 8002c16:	61bb      	str	r3, [r7, #24]

                switch( xMessage.xMessageID )
 8002c18:	2308      	movs	r3, #8
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	d900      	bls.n	8002c24 <prvProcessReceivedCommands+0x44>
 8002c22:	e079      	b.n	8002d18 <prvProcessReceivedCommands+0x138>
 8002c24:	009a      	lsls	r2, r3, #2
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <prvProcessReceivedCommands+0x158>)
 8002c28:	18d3      	adds	r3, r2, r3
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2228      	movs	r2, #40	; 0x28
 8002c32:	5c9b      	ldrb	r3, [r3, r2]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b2d9      	uxtb	r1, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2228      	movs	r2, #40	; 0x28
 8002c3e:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c40:	2408      	movs	r4, #8
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	18d1      	adds	r1, r2, r3
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	69f8      	ldr	r0, [r7, #28]
 8002c54:	f7ff ff82 	bl	8002b5c <prvInsertTimerInActiveList>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d05d      	beq.n	8002d18 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	0010      	movs	r0, r2
 8002c64:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2228      	movs	r2, #40	; 0x28
 8002c6a:	5c9b      	ldrb	r3, [r3, r2]
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	2304      	movs	r3, #4
 8002c70:	4013      	ands	r3, r2
 8002c72:	d051      	beq.n	8002d18 <prvProcessReceivedCommands+0x138>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	18d2      	adds	r2, r2, r3
 8002c7e:	69f8      	ldr	r0, [r7, #28]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	f7ff fe3c 	bl	8002904 <xTimerGenericCommand>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	617b      	str	r3, [r7, #20]
                                configASSERT( xResult );
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d140      	bne.n	8002d18 <prvProcessReceivedCommands+0x138>
 8002c96:	b672      	cpsid	i
 8002c98:	e7fe      	b.n	8002c98 <prvProcessReceivedCommands+0xb8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2228      	movs	r2, #40	; 0x28
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4393      	bics	r3, r2
 8002ca4:	b2d9      	uxtb	r1, r3
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2228      	movs	r2, #40	; 0x28
 8002caa:	5499      	strb	r1, [r3, r2]
                        break;
 8002cac:	e034      	b.n	8002d18 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2228      	movs	r2, #40	; 0x28
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b2d9      	uxtb	r1, r3
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2228      	movs	r2, #40	; 0x28
 8002cbe:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <prvProcessReceivedCommands+0xf6>
 8002cd2:	b672      	cpsid	i
 8002cd4:	e7fe      	b.n	8002cd4 <prvProcessReceivedCommands+0xf4>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	18d1      	adds	r1, r2, r3
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	69f8      	ldr	r0, [r7, #28]
 8002ce4:	f7ff ff3a 	bl	8002b5c <prvInsertTimerInActiveList>
                        break;
 8002ce8:	e016      	b.n	8002d18 <prvProcessReceivedCommands+0x138>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2228      	movs	r2, #40	; 0x28
 8002cee:	5c9b      	ldrb	r3, [r3, r2]
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d104      	bne.n	8002d02 <prvProcessReceivedCommands+0x122>
                                {
                                    vPortFree( pxTimer );
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 faa8 	bl	8003250 <vPortFree>
 8002d00:	e00a      	b.n	8002d18 <prvProcessReceivedCommands+0x138>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2228      	movs	r2, #40	; 0x28
 8002d06:	5c9b      	ldrb	r3, [r3, r2]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4393      	bics	r3, r2
 8002d0c:	b2d9      	uxtb	r1, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2228      	movs	r2, #40	; 0x28
 8002d12:	5499      	strb	r1, [r3, r2]
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d14:	e000      	b.n	8002d18 <prvProcessReceivedCommands+0x138>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002d16:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <prvProcessReceivedCommands+0x15c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	18b9      	adds	r1, r7, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fe fe1c 	bl	8001960 <xQueueReceive>
 8002d28:	1e03      	subs	r3, r0, #0
 8002d2a:	d000      	beq.n	8002d2e <prvProcessReceivedCommands+0x14e>
 8002d2c:	e75c      	b.n	8002be8 <prvProcessReceivedCommands+0x8>
        }
    }
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b009      	add	sp, #36	; 0x24
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	0800353c 	.word	0x0800353c
 8002d3c:	20000160 	.word	0x20000160

08002d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d46:	e041      	b.n	8002dcc <prvSwitchTimerLists+0x8c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <prvSwitchTimerLists+0xb4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <prvSwitchTimerLists+0xb4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7fe fbe2 	bl	800152a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	0010      	movs	r0, r2
 8002d6e:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2228      	movs	r2, #40	; 0x28
 8002d74:	5c9b      	ldrb	r3, [r3, r2]
 8002d76:	001a      	movs	r2, r3
 8002d78:	2304      	movs	r3, #4
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d026      	beq.n	8002dcc <prvSwitchTimerLists+0x8c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	18d3      	adds	r3, r2, r3
 8002d86:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d90e      	bls.n	8002dae <prvSwitchTimerLists+0x6e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <prvSwitchTimerLists+0xb4>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3304      	adds	r3, #4
 8002da4:	0019      	movs	r1, r3
 8002da6:	0010      	movs	r0, r2
 8002da8:	f7fe fb89 	bl	80014be <vListInsert>
 8002dac:	e00e      	b.n	8002dcc <prvSwitchTimerLists+0x8c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	2300      	movs	r3, #0
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2300      	movs	r3, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	f7ff fda3 	bl	8002904 <xTimerGenericCommand>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	607b      	str	r3, [r7, #4]
                    configASSERT( xResult );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <prvSwitchTimerLists+0x8c>
 8002dc8:	b672      	cpsid	i
 8002dca:	e7fe      	b.n	8002dca <prvSwitchTimerLists+0x8a>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <prvSwitchTimerLists+0xb4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1b8      	bne.n	8002d48 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <prvSwitchTimerLists+0xb4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <prvSwitchTimerLists+0xb8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <prvSwitchTimerLists+0xb4>)
 8002de2:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <prvSwitchTimerLists+0xb8>)
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]
    }
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b006      	add	sp, #24
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	20000158 	.word	0x20000158
 8002df8:	2000015c 	.word	0x2000015c

08002dfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002e00:	f000 f8ce 	bl	8002fa0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <prvCheckForValidListAndQueue+0x5c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d120      	bne.n	8002e4e <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <prvCheckForValidListAndQueue+0x60>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fe fb0a 	bl	8001428 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <prvCheckForValidListAndQueue+0x64>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7fe fb06 	bl	8001428 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <prvCheckForValidListAndQueue+0x68>)
 8002e1e:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <prvCheckForValidListAndQueue+0x60>)
 8002e20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <prvCheckForValidListAndQueue+0x6c>)
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <prvCheckForValidListAndQueue+0x64>)
 8002e26:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e28:	2200      	movs	r2, #0
 8002e2a:	210c      	movs	r1, #12
 8002e2c:	2005      	movs	r0, #5
 8002e2e:	f7fe fbf4 	bl	800161a <xQueueGenericCreate>
 8002e32:	0002      	movs	r2, r0
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <prvCheckForValidListAndQueue+0x5c>)
 8002e36:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <prvCheckForValidListAndQueue+0x5c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <prvCheckForValidListAndQueue+0x52>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <prvCheckForValidListAndQueue+0x5c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <prvCheckForValidListAndQueue+0x70>)
 8002e46:	0011      	movs	r1, r2
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fe ff57 	bl	8001cfc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e4e:	f000 f8b9 	bl	8002fc4 <vPortExitCritical>
    }
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000160 	.word	0x20000160
 8002e5c:	20000130 	.word	0x20000130
 8002e60:	20000144 	.word	0x20000144
 8002e64:	20000158 	.word	0x20000158
 8002e68:	2000015c 	.word	0x2000015c
 8002e6c:	0800351c 	.word	0x0800351c

08002e70 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	0452      	lsls	r2, r2, #17
 8002e88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b04      	subs	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b04      	subs	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <pxPortInitialiseStack+0x50>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b14      	subs	r3, #20
 8002ea6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b20      	subs	r3, #32
 8002eb2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	08002ec5 	.word	0x08002ec5

08002ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <prvTaskExitError+0x2c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	d001      	beq.n	8002eda <prvTaskExitError+0x16>
 8002ed6:	b672      	cpsid	i
 8002ed8:	e7fe      	b.n	8002ed8 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002eda:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0fc      	beq.n	8002ede <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <pxCurrentTCBConst2>)
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	3020      	adds	r0, #32
 8002f08:	f380 8809 	msr	PSP, r0
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f380 8814 	msr	CONTROL, r0
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002f18:	46ae      	mov	lr, r5
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	bc04      	pop	{r2}
 8002f1e:	b662      	cpsie	i
 8002f20:	4718      	bx	r3
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46c0      	nop			; (mov r8, r8)

08002f30 <pxCurrentTCBConst2>:
 8002f30:	2000002c 	.word	0x2000002c
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46c0      	nop			; (mov r8, r8)

08002f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <xPortStartScheduler+0x40>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <xPortStartScheduler+0x40>)
 8002f42:	21ff      	movs	r1, #255	; 0xff
 8002f44:	0409      	lsls	r1, r1, #16
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <xPortStartScheduler+0x40>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <xPortStartScheduler+0x40>)
 8002f50:	21ff      	movs	r1, #255	; 0xff
 8002f52:	0609      	lsls	r1, r1, #24
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f58:	f000 f898 	bl	800308c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <xPortStartScheduler+0x44>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002f62:	f7ff ffcd 	bl	8002f00 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f66:	f7ff f9cb 	bl	8002300 <vTaskSwitchContext>
    prvTaskExitError();
 8002f6a:	f7ff ffab 	bl	8002ec4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	e000ed20 	.word	0xe000ed20
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <vPortYield+0x1c>)
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	0552      	lsls	r2, r2, #21
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002f8c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002f90:	f3bf 8f6f 	isb	sy
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002fa4:	b672      	cpsid	i
    uxCriticalNesting++;
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <vPortEnterCritical+0x20>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <vPortEnterCritical+0x20>)
 8002fae:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002fb0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002fb4:	f3bf 8f6f 	isb	sy
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <vPortExitCritical+0x2c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <vPortExitCritical+0x10>
 8002fd0:	b672      	cpsid	i
 8002fd2:	e7fe      	b.n	8002fd2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <vPortExitCritical+0x2c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <vPortExitCritical+0x2c>)
 8002fdc:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <vPortExitCritical+0x2c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002fe6:	b662      	cpsie	i
    }
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	2000000c 	.word	0x2000000c

08002ff4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002ff4:	f3ef 8010 	mrs	r0, PRIMASK
 8002ff8:	b672      	cpsid	i
 8002ffa:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	0018      	movs	r0, r3

08003000 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8003000:	f380 8810 	msr	PRIMASK, r0
 8003004:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8003006:	46c0      	nop			; (mov r8, r8)
	...

08003010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003010:	f3ef 8009 	mrs	r0, PSP
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <pxCurrentTCBConst>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	3820      	subs	r0, #32
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800301e:	4644      	mov	r4, r8
 8003020:	464d      	mov	r5, r9
 8003022:	4656      	mov	r6, sl
 8003024:	465f      	mov	r7, fp
 8003026:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003028:	b508      	push	{r3, lr}
 800302a:	b672      	cpsid	i
 800302c:	f7ff f968 	bl	8002300 <vTaskSwitchContext>
 8003030:	b662      	cpsie	i
 8003032:	bc0c      	pop	{r2, r3}
 8003034:	6811      	ldr	r1, [r2, #0]
 8003036:	6808      	ldr	r0, [r1, #0]
 8003038:	3010      	adds	r0, #16
 800303a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800303c:	46a0      	mov	r8, r4
 800303e:	46a9      	mov	r9, r5
 8003040:	46b2      	mov	sl, r6
 8003042:	46bb      	mov	fp, r7
 8003044:	f380 8809 	msr	PSP, r0
 8003048:	3820      	subs	r0, #32
 800304a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800304c:	4718      	bx	r3
 800304e:	46c0      	nop			; (mov r8, r8)

08003050 <pxCurrentTCBConst>:
 8003050:	2000002c 	.word	0x2000002c
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46c0      	nop			; (mov r8, r8)

08003058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800305e:	f7ff ffc9 	bl	8002ff4 <ulSetInterruptMaskFromISR>
 8003062:	0003      	movs	r3, r0
 8003064:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003066:	f7ff f8bd 	bl	80021e4 <xTaskIncrementTick>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d003      	beq.n	8003076 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <SysTick_Handler+0x30>)
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	0552      	lsls	r2, r2, #21
 8003074:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff ffc1 	bl	8003000 <vClearInterruptMaskFromISR>
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b002      	add	sp, #8
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <vPortSetupTimerInterrupt+0x34>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <vPortSetupTimerInterrupt+0x38>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <vPortSetupTimerInterrupt+0x3c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	22fa      	movs	r2, #250	; 0xfa
 80030a2:	0091      	lsls	r1, r2, #2
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fd f82f 	bl	8000108 <__udivsi3>
 80030aa:	0003      	movs	r3, r0
 80030ac:	001a      	movs	r2, r3
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <vPortSetupTimerInterrupt+0x40>)
 80030b0:	3a01      	subs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80030b4:	4b02      	ldr	r3, [pc, #8]	; (80030c0 <vPortSetupTimerInterrupt+0x34>)
 80030b6:	2207      	movs	r2, #7
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	e000e010 	.word	0xe000e010
 80030c4:	e000e018 	.word	0xe000e018
 80030c8:	20000000 	.word	0x20000000
 80030cc:	e000e014 	.word	0xe000e014

080030d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80030dc:	f7fe ffe2 	bl	80020a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030e0:	4b55      	ldr	r3, [pc, #340]	; (8003238 <pvPortMalloc+0x168>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80030e8:	f000 f900 	bl	80032ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <pvPortMalloc+0x16c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4013      	ands	r3, r2
 80030f4:	d000      	beq.n	80030f8 <pvPortMalloc+0x28>
 80030f6:	e092      	b.n	800321e <pvPortMalloc+0x14e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d022      	beq.n	8003144 <pvPortMalloc+0x74>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80030fe:	2208      	movs	r2, #8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	18d3      	adds	r3, r2, r3
            if( ( xWantedSize > 0 ) && 
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d21c      	bcs.n	8003144 <pvPortMalloc+0x74>
            {
                xWantedSize += xHeapStructSize;
 800310a:	2208      	movs	r2, #8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	189b      	adds	r3, r3, r2
 8003110:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2207      	movs	r2, #7
 8003116:	4013      	ands	r3, r2
 8003118:	d017      	beq.n	800314a <pvPortMalloc+0x7a>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2207      	movs	r2, #7
 800311e:	4393      	bics	r3, r2
 8003120:	3308      	adds	r3, #8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d20a      	bcs.n	800313e <pvPortMalloc+0x6e>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2207      	movs	r2, #7
 800312c:	4393      	bics	r3, r2
 800312e:	3308      	adds	r3, #8
 8003130:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2207      	movs	r2, #7
 8003136:	4013      	ands	r3, r2
 8003138:	d007      	beq.n	800314a <pvPortMalloc+0x7a>
 800313a:	b672      	cpsid	i
 800313c:	e7fe      	b.n	800313c <pvPortMalloc+0x6c>
                    }
                    else
                    {
                        xWantedSize = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003142:	e002      	b.n	800314a <pvPortMalloc+0x7a>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	e000      	b.n	800314c <pvPortMalloc+0x7c>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800314a:	46c0      	nop			; (mov r8, r8)
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d065      	beq.n	800321e <pvPortMalloc+0x14e>
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <pvPortMalloc+0x170>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d860      	bhi.n	800321e <pvPortMalloc+0x14e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <pvPortMalloc+0x174>)
 800315e:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003160:	4b38      	ldr	r3, [pc, #224]	; (8003244 <pvPortMalloc+0x174>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003166:	e004      	b.n	8003172 <pvPortMalloc+0xa2>
                {
                    pxPreviousBlock = pxBlock;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d903      	bls.n	8003184 <pvPortMalloc+0xb4>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f1      	bne.n	8003168 <pvPortMalloc+0x98>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <pvPortMalloc+0x168>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	429a      	cmp	r2, r3
 800318c:	d047      	beq.n	800321e <pvPortMalloc+0x14e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2208      	movs	r2, #8
 8003194:	189b      	adds	r3, r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	2308      	movs	r3, #8
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d916      	bls.n	80031de <pvPortMalloc+0x10e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	18d3      	adds	r3, r2, r3
 80031b6:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2207      	movs	r2, #7
 80031bc:	4013      	ands	r3, r2
 80031be:	d001      	beq.n	80031c4 <pvPortMalloc+0xf4>
 80031c0:	b672      	cpsid	i
 80031c2:	e7fe      	b.n	80031c2 <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad2      	subs	r2, r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 f8e7 	bl	80033ac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <pvPortMalloc+0x170>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <pvPortMalloc+0x170>)
 80031ea:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <pvPortMalloc+0x170>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <pvPortMalloc+0x178>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d203      	bcs.n	8003200 <pvPortMalloc+0x130>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <pvPortMalloc+0x170>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <pvPortMalloc+0x178>)
 80031fe:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <pvPortMalloc+0x16c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	431a      	orrs	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <pvPortMalloc+0x17c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <pvPortMalloc+0x17c>)
 800321c:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800321e:	f7fe ff4d 	bl	80020bc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2207      	movs	r2, #7
 8003226:	4013      	ands	r3, r2
 8003228:	d001      	beq.n	800322e <pvPortMalloc+0x15e>
 800322a:	b672      	cpsid	i
 800322c:	e7fe      	b.n	800322c <pvPortMalloc+0x15c>
    return pvReturn;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b006      	add	sp, #24
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000944 	.word	0x20000944
 800323c:	20000958 	.word	0x20000958
 8003240:	20000948 	.word	0x20000948
 8003244:	2000093c 	.word	0x2000093c
 8003248:	2000094c 	.word	0x2000094c
 800324c:	20000950 	.word	0x20000950

08003250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03a      	beq.n	80032d8 <vPortFree+0x88>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003262:	2308      	movs	r3, #8
 8003264:	425b      	negs	r3, r3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <vPortFree+0x90>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4013      	ands	r3, r2
 800327a:	d101      	bne.n	8003280 <vPortFree+0x30>
 800327c:	b672      	cpsid	i
 800327e:	e7fe      	b.n	800327e <vPortFree+0x2e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <vPortFree+0x3c>
 8003288:	b672      	cpsid	i
 800328a:	e7fe      	b.n	800328a <vPortFree+0x3a>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <vPortFree+0x90>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4013      	ands	r3, r2
 8003296:	d01f      	beq.n	80032d8 <vPortFree+0x88>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11b      	bne.n	80032d8 <vPortFree+0x88>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <vPortFree+0x90>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80032b0:	f7fe fef8 	bl	80020a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <vPortFree+0x94>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	18d2      	adds	r2, r2, r3
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <vPortFree+0x94>)
 80032c0:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 f871 	bl	80033ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <vPortFree+0x98>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <vPortFree+0x98>)
 80032d2:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80032d4:	f7fe fef2 	bl	80020bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b004      	add	sp, #16
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000958 	.word	0x20000958
 80032e4:	20000948 	.word	0x20000948
 80032e8:	20000954 	.word	0x20000954

080032ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032f2:	23fa      	movs	r3, #250	; 0xfa
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80032f8:	4b26      	ldr	r3, [pc, #152]	; (8003394 <prvHeapInit+0xa8>)
 80032fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2207      	movs	r2, #7
 8003300:	4013      	ands	r3, r2
 8003302:	d00c      	beq.n	800331e <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3307      	adds	r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2207      	movs	r2, #7
 800330e:	4393      	bics	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad2      	subs	r2, r2, r3
 8003318:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <prvHeapInit+0xa8>)
 800331a:	18d3      	adds	r3, r2, r3
 800331c:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <prvHeapInit+0xac>)
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <prvHeapInit+0xac>)
 800332a:	2200      	movs	r2, #0
 800332c:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	18d3      	adds	r3, r2, r3
 8003334:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003336:	2208      	movs	r2, #8
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2207      	movs	r2, #7
 8003342:	4393      	bics	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <prvHeapInit+0xb0>)
 800334a:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <prvHeapInit+0xb0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2200      	movs	r2, #0
 8003352:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <prvHeapInit+0xb0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	1ad2      	subs	r2, r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <prvHeapInit+0xb0>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <prvHeapInit+0xb4>)
 8003378:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <prvHeapInit+0xb8>)
 8003380:	601a      	str	r2, [r3, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <prvHeapInit+0xbc>)
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	0612      	lsls	r2, r2, #24
 8003388:	601a      	str	r2, [r3, #0]
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b004      	add	sp, #16
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	2000016c 	.word	0x2000016c
 8003398:	2000093c 	.word	0x2000093c
 800339c:	20000944 	.word	0x20000944
 80033a0:	2000094c 	.word	0x2000094c
 80033a4:	20000948 	.word	0x20000948
 80033a8:	20000958 	.word	0x20000958

080033ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <prvInsertBlockIntoFreeList+0xa8>)
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e002      	b.n	80033c0 <prvInsertBlockIntoFreeList+0x14>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d8f7      	bhi.n	80033ba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d108      	bne.n	80033ee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	18d2      	adds	r2, r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	18d2      	adds	r2, r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d118      	bne.n	8003434 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <prvInsertBlockIntoFreeList+0xac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d00d      	beq.n	800342a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	18d2      	adds	r2, r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e008      	b.n	800343c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <prvInsertBlockIntoFreeList+0xac>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e003      	b.n	800343c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d002      	beq.n	800344a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	2000093c 	.word	0x2000093c
 8003458:	20000944 	.word	0x20000944

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	2600      	movs	r6, #0
 8003460:	4d0c      	ldr	r5, [pc, #48]	; (8003494 <__libc_init_array+0x38>)
 8003462:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	42a6      	cmp	r6, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	2600      	movs	r6, #0
 800346e:	f000 f82b 	bl	80034c8 <_init>
 8003472:	4d0a      	ldr	r5, [pc, #40]	; (800349c <__libc_init_array+0x40>)
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <__libc_init_array+0x44>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	42a6      	cmp	r6, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	00b3      	lsls	r3, r6, #2
 8003482:	58eb      	ldr	r3, [r5, r3]
 8003484:	4798      	blx	r3
 8003486:	3601      	adds	r6, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	00b3      	lsls	r3, r6, #2
 800348c:	58eb      	ldr	r3, [r5, r3]
 800348e:	4798      	blx	r3
 8003490:	3601      	adds	r6, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	08003564 	.word	0x08003564
 8003498:	08003564 	.word	0x08003564
 800349c:	08003564 	.word	0x08003564
 80034a0:	08003568 	.word	0x08003568

080034a4 <memcpy>:
 80034a4:	2300      	movs	r3, #0
 80034a6:	b510      	push	{r4, lr}
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d100      	bne.n	80034ae <memcpy+0xa>
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	5ccc      	ldrb	r4, [r1, r3]
 80034b0:	54c4      	strb	r4, [r0, r3]
 80034b2:	3301      	adds	r3, #1
 80034b4:	e7f8      	b.n	80034a8 <memcpy+0x4>

080034b6 <memset>:
 80034b6:	0003      	movs	r3, r0
 80034b8:	1882      	adds	r2, r0, r2
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d100      	bne.n	80034c0 <memset+0xa>
 80034be:	4770      	bx	lr
 80034c0:	7019      	strb	r1, [r3, #0]
 80034c2:	3301      	adds	r3, #1
 80034c4:	e7f9      	b.n	80034ba <memset+0x4>
	...

080034c8 <_init>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr

080034d4 <_fini>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr
